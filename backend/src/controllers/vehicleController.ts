import { Request, Response } from 'express'
import { VehicleService } from '@/services/vehicleService'

export class VehicleController {
  // GET /api/vehicles - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  static async getAvailableVehicles(req: Request, res: Response): Promise<void> {
    try {
      const { type } = req.query

      const vehicles = await VehicleService.getAvailableVehicles()

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const vehicleData = vehicles.map(vehicle => ({
        id: vehicle.id,
        type: vehicle.type,
        name: vehicle.name,
        capacity: vehicle.capacity,
        pricePerKm: vehicle.price_per_km,
        imageUrl: vehicle.image_url,
        description: vehicle.description,
        features: vehicle.features || [],
        isAvailable: true,
        status: vehicle.status,
        licensePlate: vehicle.license_plate,
        brand: vehicle.brand,
        model: vehicle.model,
        driver: vehicle.driver ? {
          id: vehicle.driver.id,
          name: vehicle.driver.name,
          phone: vehicle.driver.phone,
          status: vehicle.driver.status
        } : null
      }))

      res.json({
        success: true,
        data: vehicleData,
        total: vehicleData.length
      })
    } catch (error) {
      console.error('‚ùå Error fetching vehicles:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch vehicles'
      })
    }
  }

  // GET /api/vehicles/:id - –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  static async getVehicleById(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const vehicle = await VehicleService.getVehicleById(parseInt(id))

      if (!vehicle) {
        res.status(404).json({
          success: false,
          error: 'Vehicle not found'
        })
        return
      }

      res.json({
        success: true,
        data: {
          id: vehicle.id,
          type: vehicle.type,
          name: vehicle.name,
          capacity: vehicle.capacity,
          pricePerKm: vehicle.price_per_km,
          imageUrl: vehicle.image_url,
          description: vehicle.description,
          features: vehicle.features || []
        }
      })
    } catch (error) {
      console.error('‚ùå Error fetching vehicle:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch vehicle details'
      })
    }
  }

  // GET /api/vehicles/all - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  static async getAllVehicles(req: Request, res: Response): Promise<void> {
    try {
      const vehicles = await VehicleService.getAllVehicles()

      const vehicleData = vehicles.map(vehicle => ({
        id: vehicle.id,
        type: vehicle.type,
        name: vehicle.name,
        brand: vehicle.brand,
        model: vehicle.model,
        license_plate: vehicle.license_plate,
        capacity: vehicle.capacity,
        pricePerKm: Number(vehicle.price_per_km),
        status: vehicle.status,
        description: vehicle.description,
        features: vehicle.features || [],
        imageUrl: vehicle.image_url,
        wialonUnitId: vehicle.wialon_unit_id,
        driver: (vehicle as any).driver ? {
          id: (vehicle as any).driver.id,
          name: (vehicle as any).driver.name,
          phone: (vehicle as any).driver.phone
        } : null,
        createdAt: vehicle.created_at,
        updatedAt: vehicle.updated_at
      }))

      res.json({
        success: true,
        data: vehicleData,
        total: vehicleData.length
      })
    } catch (error) {
      console.error('‚ùå Error fetching all vehicles:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch vehicles'
      })
    }
  }

  // POST /api/vehicles - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
  static async createVehicle(req: Request, res: Response): Promise<void> {
    try {
      const vehicleData = req.body
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', vehicleData)

      const vehicle = await VehicleService.createVehicle(vehicleData)

      res.status(201).json({
        success: true,
        data: {
          id: vehicle.id,
          type: vehicle.type,
          name: vehicle.name,
          brand: vehicle.brand,
          model: vehicle.model,
          license_plate: vehicle.license_plate,
          capacity: vehicle.capacity,
          pricePerKm: Number(vehicle.price_per_km),
          status: vehicle.status,
          description: vehicle.description,
          features: vehicle.features || [],
          imageUrl: vehicle.image_url,
          wialonUnitId: vehicle.wialon_unit_id,
          createdAt: vehicle.created_at,
          updatedAt: vehicle.updated_at
        }
      })
    } catch (error) {
      console.error('‚ùå Error creating vehicle:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to create vehicle'
      })
    }
  }

  // PUT /api/vehicles/:id - –û–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
  static async updateVehicle(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const vehicleData = req.body
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${id}:`, vehicleData)

      const vehicle = await VehicleService.updateVehicle(parseInt(id), vehicleData)

      if (!vehicle) {
        res.status(404).json({
          success: false,
          error: 'Vehicle not found'
        })
        return
      }

      res.json({
        success: true,
        data: {
          id: vehicle.id,
          type: vehicle.type,
          name: vehicle.name,
          brand: vehicle.brand,
          model: vehicle.model,
          license_plate: vehicle.license_plate,
          capacity: vehicle.capacity,
          pricePerKm: Number(vehicle.price_per_km),
          status: vehicle.status,
          description: vehicle.description,
          features: vehicle.features || [],
          imageUrl: vehicle.image_url,
          wialonUnitId: vehicle.wialon_unit_id,
          createdAt: vehicle.created_at,
          updatedAt: vehicle.updated_at
        }
      })
    } catch (error) {
      console.error('‚ùå Error updating vehicle:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to update vehicle'
      })
    }
  }

  // DELETE /api/vehicles/:id - –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
  static async deleteVehicle(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${id}`)

      const deleted = await VehicleService.deleteVehicle(parseInt(id))

      if (!deleted) {
        res.status(404).json({
          success: false,
          error: 'Vehicle not found'
        })
        return
      }

      res.json({
        success: true,
        message: 'Vehicle deleted successfully'
      })
    } catch (error) {
      console.error('‚ùå Error deleting vehicle:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to delete vehicle'
      })
    }
  }

  // PUT /api/vehicles/:id/status - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  static async updateVehicleStatus(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const { status } = req.body
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${id} –Ω–∞ ${status}`)

      const vehicle = await VehicleService.updateVehicleStatus(parseInt(id), status)

      if (!vehicle) {
        res.status(404).json({
          success: false,
          error: 'Vehicle not found'
        })
        return
      }

      res.json({
        success: true,
        data: {
          id: vehicle.id,
          status: vehicle.status
        }
      })
    } catch (error) {
      console.error('‚ùå Error updating vehicle status:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to update vehicle status'
      })
    }
  }

  // GET /api/vehicles/types - –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
  static async getVehicleTypes(req: Request, res: Response): Promise<void> {
    try {
      console.log('üöó –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º...')

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const vehicles = await VehicleService.getAvailableVehicles()
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${vehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`)

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      const vehicleNamesMap = new Map()

      vehicles.forEach(vehicle => {
        const nameKey = vehicle.name // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if (!vehicleNamesMap.has(nameKey)) {
          // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
          vehicleNamesMap.set(nameKey, {
            type: vehicle.type,
            name: vehicle.name,
            description: vehicle.description || `${vehicle.name}`,
            capacity: vehicle.capacity,
            baggageCapacity: Math.floor(vehicle.capacity / 2), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–∞–≥–∞–∂–∞
            features: vehicle.features || [],
            imageUrl: vehicle.image_url,
            pricePerKm: Number(vehicle.price_per_km),
            basePrice: 20000, // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
            availableCount: vehicles.filter(v => v.name === vehicle.name && v.status === 'AVAILABLE').length,
            totalCount: vehicles.filter(v => v.name === vehicle.name).length
          })
        }
      })

      const vehicleOptions = Array.from(vehicleNamesMap.values())
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${vehicleOptions.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º`)

      res.json({
        success: true,
        data: vehicleOptions
      })
    } catch (error) {
      console.error('‚ùå Error fetching vehicle types:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch vehicle types'
      })
    }
  }

  // PUT /api/vehicles/:id/wialon - –°–≤—è–∑–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å Wialon unit
  static async linkWialonUnit(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const { wialonUnitId } = req.body
      console.log(`üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${id} —Å Wialon unit ${wialonUnitId}`)

      const vehicle = await VehicleService.linkWialonUnit(parseInt(id), wialonUnitId)

      res.json({
        success: true,
        data: {
          id: vehicle.id,
          wialonUnitId: vehicle.wialon_unit_id
        }
      })
    } catch (error) {
      console.error('‚ùå Error linking Wialon unit:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to link Wialon unit'
      })
    }
  }

  // GET /api/vehicles/wialon/mapped - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ Wialon
  static async getVehiclesWithWialonMapping(req: Request, res: Response): Promise<void> {
    try {
      const vehicles = await VehicleService.getVehiclesWithWialonMapping()

      const vehicleData = vehicles.map(vehicle => ({
        id: vehicle.id,
        name: vehicle.name,
        brand: vehicle.brand,
        model: vehicle.model,
        license_plate: vehicle.license_plate,
        wialonUnitId: vehicle.wialon_unit_id,
        driver: (vehicle as any).driver ? {
          id: (vehicle as any).driver.id,
          name: (vehicle as any).driver.name,
          phone: (vehicle as any).driver.phone
        } : null
      }))

      res.json({
        success: true,
        data: vehicleData
      })
    } catch (error) {
      console.error('‚ùå Error fetching vehicles with Wialon mapping:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch vehicles with Wialon mapping'
      })
    }
  }
}
