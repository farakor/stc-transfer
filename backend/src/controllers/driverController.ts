import { Request, Response } from 'express'
import { prisma } from '@/utils/prisma'
import { DriverStatus, BookingStatus, VehicleStatus } from '@prisma/client'

export class DriverController {
  // POST /api/drivers/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  static async loginByPhone(req: Request, res: Response): Promise<void> {
    try {
      const { phone } = req.body
      console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phone}`)

      if (!phone) {
        res.status(400).json({
          success: false,
          error: 'Phone number is required'
        })
        return
      }

      // –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const cleanPhone = phone.replace(/\D/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
      
      console.log('üîç –ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
        original: phone,
        clean: cleanPhone
      })

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      const allDrivers = await prisma.driver.findMany({
        select: {
          id: true,
          phone: true
        }
      })

      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –Ω–æ–º–µ—Ä–∞—Ö
      const matchedDriver = allDrivers.find(d => {
        if (!d.phone) return false
        const dbPhoneClean = d.phone.replace(/\D/g, '')
        return dbPhoneClean === cleanPhone
      })

      if (!matchedDriver) {
        res.status(404).json({
          success: false,
          error: 'Driver not found with this phone number'
        })
        return
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await prisma.driver.findUnique({
        where: { id: matchedDriver.id },
        include: {
          vehicle: true,
          bookings: {
            where: {
              status: {
                in: [BookingStatus.VEHICLE_ASSIGNED, BookingStatus.CONFIRMED, BookingStatus.IN_PROGRESS]
              }
            },
            include: {
              user: true
            },
            orderBy: {
              created_at: 'desc'
            }
          }
        }
      })

      if (!driver) {
        res.status(404).json({
          success: false,
          error: 'Driver not found with this phone number'
        })
        return
      }

      const formattedDriver = {
        id: driver.id,
        name: driver.name,
        phone: driver.phone,
        license: driver.license,
        status: driver.status,
        vehicle: driver.vehicle ? {
          id: driver.vehicle.id,
          brand: driver.vehicle.brand,
          model: driver.vehicle.model,
          licensePlate: driver.vehicle.license_plate,
          type: driver.vehicle.type
        } : null,
        activeBookings: driver.bookings.map(booking => ({
          id: booking.id,
          bookingNumber: booking.booking_number,
          fromLocation: booking.from_location,
          toLocation: booking.to_location,
          pickupLocation: booking.pickup_location,
          dropoffLocation: booking.dropoff_location,
          pickupTime: booking.pickup_time,
          passengerCount: booking.passenger_count,
          price: Number(booking.price),
          status: booking.status,
          user: {
            name: booking.user.name || booking.user.first_name,
            phone: booking.user.phone,
            photoUrl: booking.user.photo_url,
            username: booking.user.username,
            telegramId: booking.user.telegram_id
          },
          notes: booking.notes,
          createdAt: booking.created_at
        })),
        createdAt: driver.created_at,
        updatedAt: driver.updated_at
      }

      console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å ${driver.name} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`)

      res.json({
        success: true,
        data: formattedDriver
      })
    } catch (error) {
      console.error('‚ùå Error during driver login:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to login driver'
      })
    }
  }

  // GET /api/drivers/:id/active-bookings - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è
  static async getActiveBookings(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const driverId = parseInt(id)

      console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}`)

      if (isNaN(driverId)) {
        res.status(400).json({
          success: false,
          error: 'Invalid driver ID'
        })
        return
      }

      const bookings = await prisma.booking.findMany({
        where: {
          driver_id: driverId,
          status: {
            in: [BookingStatus.VEHICLE_ASSIGNED, BookingStatus.CONFIRMED, BookingStatus.IN_PROGRESS]
          }
        },
        include: {
          user: true,
          vehicle: true
        },
        orderBy: {
          created_at: 'desc'
        }
      })

      const formattedBookings = bookings.map(booking => ({
        id: booking.id,
        bookingNumber: booking.booking_number,
        fromLocation: booking.from_location,
        toLocation: booking.to_location,
        pickupLocation: booking.pickup_location,
        dropoffLocation: booking.dropoff_location,
        pickupTime: booking.pickup_time,
        passengerCount: booking.passenger_count,
        price: Number(booking.price),
        status: booking.status,
        user: {
          name: booking.user.name || booking.user.first_name,
          phone: booking.user.phone,
          photoUrl: booking.user.photo_url,
          username: booking.user.username,
          telegramId: booking.user.telegram_id
        },
        notes: booking.notes,
        distanceKm: booking.distance_km,
        createdAt: booking.created_at,
        updatedAt: booking.updated_at
      }))

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${formattedBookings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}`)

      res.json({
        success: true,
        data: formattedBookings
      })
    } catch (error) {
      console.error('‚ùå Error fetching active bookings:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch active bookings'
      })
    }
  }

  // PUT /api/drivers/:driverId/bookings/:bookingId/accept - –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
  static async acceptBooking(req: Request, res: Response): Promise<void> {
    try {
      const { driverId, bookingId } = req.params
      const driverIdNum = parseInt(driverId)

      console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑ ${bookingId}`)

      if (isNaN(driverIdNum)) {
        res.status(400).json({
          success: false,
          error: 'Invalid driver ID'
        })
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é
      const booking = await prisma.booking.findFirst({
        where: {
          id: bookingId,
          driver_id: driverIdNum,
          status: BookingStatus.VEHICLE_ASSIGNED
        },
        include: {
          user: true,
          driver: true,
          vehicle: true
        }
      })

      if (!booking) {
        res.status(404).json({
          success: false,
          error: 'Booking not found or not assigned to this driver'
        })
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ CONFIRMED (–í –ø—É—Ç–∏)
      const updatedBooking = await prisma.booking.update({
        where: { id: bookingId },
        data: {
          status: BookingStatus.CONFIRMED,
          updated_at: new Date()
        },
        include: {
          user: true,
          driver: true,
          vehicle: true
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ BUSY
      await prisma.driver.update({
        where: { id: driverIdNum },
        data: {
          status: DriverStatus.BUSY,
          updated_at: new Date()
        }
      })

      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${bookingId} –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º ${driverId}, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ CONFIRMED`)

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑
      try {
        if (updatedBooking.user.telegram_id) {
          const { TelegramBotService } = await import('@/services/telegramBot')
          const telegramBot = TelegramBotService.getInstance()
          await telegramBot.sendDriverAcceptedNotification(
            Number(updatedBooking.user.telegram_id),
            updatedBooking,
            updatedBooking.driver
          )
          console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${updatedBooking.user.telegram_id}`)
        }
      } catch (error) {
        console.error('‚ùå Failed to send driver accepted notification to client:', error)
      }

      res.json({
        success: true,
        data: {
          id: updatedBooking.id,
          status: updatedBooking.status,
          message: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –í—ã –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É.'
        }
      })
    } catch (error) {
      console.error('‚ùå Error accepting booking:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to accept booking'
      })
    }
  }

  // PUT /api/drivers/:driverId/bookings/:bookingId/start - –ù–∞—á–∞—Ç—å —Ä–µ–π—Å
  static async startTrip(req: Request, res: Response): Promise<void> {
    try {
      const { driverId, bookingId } = req.params
      const driverIdNum = parseInt(driverId)

      console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–π—Å ${bookingId}`)

      if (isNaN(driverIdNum)) {
        res.status(400).json({
          success: false,
          error: 'Invalid driver ID'
        })
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤ —Å—Ç–∞—Ç—É—Å–µ CONFIRMED
      const booking = await prisma.booking.findFirst({
        where: {
          id: bookingId,
          driver_id: driverIdNum,
          status: BookingStatus.CONFIRMED
        }
      })

      if (!booking) {
        res.status(404).json({
          success: false,
          error: 'Booking not found or not in correct status'
        })
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ IN_PROGRESS (–í —Ä–∞–±–æ—Ç–µ)
      const updatedBooking = await prisma.booking.update({
        where: { id: bookingId },
        data: {
          status: BookingStatus.IN_PROGRESS,
          updated_at: new Date()
        },
        include: {
          user: true,
          driver: true,
          vehicle: true
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ BUSY
      if (updatedBooking.vehicle_id) {
        await prisma.vehicle.update({
          where: { id: updatedBooking.vehicle_id },
          data: { 
            status: VehicleStatus.BUSY,
            updated_at: new Date()
          }
        })
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${updatedBooking.vehicle_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ BUSY`)
      }

      console.log(`‚úÖ –†–µ–π—Å ${bookingId} –Ω–∞—á–∞—Ç, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ IN_PROGRESS`)

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–π—Å –Ω–∞—á–∞–ª—Å—è
      try {
        if (updatedBooking.user.telegram_id) {
          const { TelegramBotService } = await import('@/services/telegramBot')
          const telegramBot = TelegramBotService.getInstance()
          await telegramBot.sendTripStartedNotification(
            Number(updatedBooking.user.telegram_id),
            updatedBooking,
            updatedBooking.driver
          )
          console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–π—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${updatedBooking.user.telegram_id}`)
        }
      } catch (error) {
        console.error('‚ùå Failed to send trip started notification to client:', error)
      }

      res.json({
        success: true,
        data: {
          id: updatedBooking.id,
          status: updatedBooking.status,
          message: '–†–µ–π—Å –Ω–∞—á–∞—Ç. –ö–ª–∏–µ–Ω—Ç –≤ –º–∞—à–∏–Ω–µ.'
        }
      })
    } catch (error) {
      console.error('‚ùå Error starting trip:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to start trip'
      })
    }
  }

  // PUT /api/drivers/:driverId/bookings/:bookingId/complete - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑
  static async completeBooking(req: Request, res: Response): Promise<void> {
    try {
      const { driverId, bookingId } = req.params
      const driverIdNum = parseInt(driverId)

      console.log(`üèÅ –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑ ${bookingId}`)

      if (isNaN(driverIdNum)) {
        res.status(400).json({
          success: false,
          error: 'Invalid driver ID'
        })
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤ —Å—Ç–∞—Ç—É—Å–µ IN_PROGRESS
      const booking = await prisma.booking.findFirst({
        where: {
          id: bookingId,
          driver_id: driverIdNum,
          status: BookingStatus.IN_PROGRESS
        }
      })

      if (!booking) {
        res.status(404).json({
          success: false,
          error: 'Booking not found or not in progress'
        })
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ COMPLETED (–ó–∞–≤–µ—Ä—à–µ–Ω)
      const updatedBooking = await prisma.booking.update({
        where: { id: bookingId },
        data: {
          status: BookingStatus.COMPLETED,
          updated_at: new Date()
        },
        include: {
          user: true,
          driver: true,
          vehicle: true
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ AVAILABLE
      if (updatedBooking.vehicle_id) {
        await prisma.vehicle.update({
          where: { id: updatedBooking.vehicle_id },
          data: { 
            status: VehicleStatus.AVAILABLE,
            updated_at: new Date()
          }
        })
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${updatedBooking.vehicle_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ AVAILABLE`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      const activeBookings = await prisma.booking.findMany({
        where: {
          driver_id: driverIdNum,
          status: {
            in: [BookingStatus.VEHICLE_ASSIGNED, BookingStatus.CONFIRMED, BookingStatus.IN_PROGRESS]
          }
        }
      })

      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ AVAILABLE
      if (activeBookings.length === 0) {
        await prisma.driver.update({
          where: { id: driverIdNum },
          data: {
            status: DriverStatus.AVAILABLE,
            updated_at: new Date()
          }
        })
      }

      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${bookingId} –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ COMPLETED`)

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      try {
        if (updatedBooking.user.telegram_id) {
          const { TelegramBotService } = await import('@/services/telegramBot')
          const telegramBot = TelegramBotService.getInstance()
          await telegramBot.sendTripCompletedNotification(
            Number(updatedBooking.user.telegram_id),
            updatedBooking
          )
          console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${updatedBooking.user.telegram_id}`)
        }
      } catch (error) {
        console.error('‚ùå Failed to send trip completed notification to client:', error)
      }

      res.json({
        success: true,
        data: {
          id: updatedBooking.id,
          status: updatedBooking.status,
          message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.'
        }
      })
    } catch (error) {
      console.error('‚ùå Error completing booking:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to complete booking'
      })
    }
  }
  // GET /api/drivers/telegram/:telegramId - –ü–æ–ª—É—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ Telegram ID
  static async getDriverByTelegramId(req: Request, res: Response): Promise<void> {
    try {
      const { telegramId } = req.params
      console.log(`üîç –ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ Telegram ID: ${telegramId}`)

      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø–æ–ª—è telegram_id –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª—å Driver

      res.status(404).json({
        success: false,
        error: 'Driver authentication not implemented yet'
      })
    } catch (error) {
      console.error('‚ùå Error finding driver by Telegram ID:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to find driver'
      })
    }
  }

  // GET /api/drivers/:id/trips - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è
  static async getDriverTrips(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const driverId = parseInt(id)

      console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}`)

      if (isNaN(driverId)) {
        res.status(400).json({
          success: false,
          error: 'Invalid driver ID'
        })
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const driver = await prisma.driver.findUnique({
        where: { id: driverId },
        include: { vehicle: true }
      })

      if (!driver) {
        res.status(404).json({
          success: false,
          error: 'Driver not found'
        })
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è
      const trips = await prisma.booking.findMany({
        where: {
          driver_id: driverId,
          status: {
            in: [BookingStatus.CONFIRMED, BookingStatus.IN_PROGRESS, BookingStatus.COMPLETED]
          }
        },
        include: {
          user: true,
          vehicle: true,
          driver: true
        },
        orderBy: {
          created_at: 'desc'
        },
        take: 20 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      })

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const formattedTrips = trips.map(trip => ({
        id: trip.id,
        fromLocation: trip.from_location,
        toLocation: trip.to_location,
        pickupLocation: trip.pickup_location,
        dropoffLocation: trip.dropoff_location,
        pickupTime: trip.pickup_time,
        passengerCount: trip.passenger_count,
        price: Number(trip.price),
        status: trip.status,
        user: {
          name: trip.user.name || trip.user.first_name,
          phone: trip.user.phone,
          telegramId: trip.user.telegram_id
        },
        notes: trip.notes,
        distanceKm: trip.distance_km,
        createdAt: trip.created_at,
        updatedAt: trip.updated_at,
        vehicle: trip.vehicle ? {
          id: trip.vehicle.id,
          brand: trip.vehicle.brand,
          model: trip.vehicle.model,
          licensePlate: trip.vehicle.license_plate,
          type: trip.vehicle.type
        } : null
      }))

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${formattedTrips.length} —Ä–µ–π—Å–æ–≤ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}`)

      res.json({
        success: true,
        data: formattedTrips
      })
    } catch (error) {
      console.error('‚ùå Error fetching driver trips:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch driver trips'
      })
    }
  }

  // PUT /api/drivers/:id/status - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
  static async updateDriverStatus(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const { status } = req.body
      const driverId = parseInt(id)

      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId} –Ω–∞ ${status}`)

      if (isNaN(driverId)) {
        res.status(400).json({
          success: false,
          error: 'Invalid driver ID'
        })
        return
      }

      if (!Object.values(DriverStatus).includes(status)) {
        res.status(400).json({
          success: false,
          error: 'Invalid status'
        })
        return
      }

      const driver = await prisma.driver.update({
        where: { id: driverId },
        data: {
          status: status as DriverStatus,
          updated_at: new Date()
        },
        include: {
          vehicle: true
        }
      })

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è ${driverId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`)

      res.json({
        success: true,
        data: {
          id: driver.id,
          name: driver.name,
          phone: driver.phone,
          license: driver.license,
          status: driver.status,
          vehicle: driver.vehicle ? {
            id: driver.vehicle.id,
            brand: driver.vehicle.brand,
            model: driver.vehicle.model,
            licensePlate: driver.vehicle.license_plate,
            type: driver.vehicle.type
          } : null,
          updatedAt: driver.updated_at
        }
      })
    } catch (error) {
      console.error('‚ùå Error updating driver status:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to update driver status'
      })
    }
  }

  // GET /api/drivers/:id - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ
  static async getDriverById(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params
      const driverId = parseInt(id)

      console.log(`üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–¥–∏—Ç–µ–ª–µ ${driverId}`)

      if (isNaN(driverId)) {
        res.status(400).json({
          success: false,
          error: 'Invalid driver ID'
        })
        return
      }

      const driver = await prisma.driver.findUnique({
        where: { id: driverId },
        include: {
          vehicle: true,
          bookings: {
            where: {
              status: {
                in: [BookingStatus.CONFIRMED, BookingStatus.IN_PROGRESS]
              }
            },
            include: {
              user: true
            },
            orderBy: {
              created_at: 'desc'
            }
          }
        }
      })

      if (!driver) {
        res.status(404).json({
          success: false,
          error: 'Driver not found'
        })
        return
      }

      const formattedDriver = {
        id: driver.id,
        name: driver.name,
        phone: driver.phone,
        license: driver.license,
        status: driver.status,
        vehicle: driver.vehicle ? {
          id: driver.vehicle.id,
          brand: driver.vehicle.brand,
          model: driver.vehicle.model,
          licensePlate: driver.vehicle.license_plate,
          type: driver.vehicle.type
        } : null,
        activeBookings: driver.bookings.map(booking => ({
          id: booking.id,
          fromLocation: booking.from_location,
          toLocation: booking.to_location,
          status: booking.status,
          pickupTime: booking.pickup_time,
          user: {
            name: booking.user.name || booking.user.first_name,
            phone: booking.user.phone
          },
          createdAt: booking.created_at
        })),
        createdAt: driver.created_at,
        updatedAt: driver.updated_at
      }

      console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ ${driverId} –ø–æ–ª—É—á–µ–Ω–∞`)

      res.json({
        success: true,
        data: formattedDriver
      })
    } catch (error) {
      console.error('‚ùå Error fetching driver info:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch driver info'
      })
    }
  }
}
