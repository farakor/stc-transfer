import { Request, Response } from 'express'
import { SettingsService, CreateSettingData } from '@/services/settingsService'

export class SettingsController {
  // GET /api/admin/settings - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static async getAllSettings(req: Request, res: Response): Promise<void> {
    try {
      console.log('‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã')

      const { category } = req.query

      let settings
      if (category && typeof category === 'string') {
        settings = await SettingsService.getSettingsByCategory(category)
        console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${settings.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`)
      } else {
        settings = await SettingsService.getSettingsGroupedByCategory()
        console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
      }

      res.json({
        success: true,
        data: settings
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch settings'
      })
    }
  }

  // GET /api/admin/settings/:key - –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –∫–ª—é—á—É
  static async getSettingByKey(req: Request, res: Response): Promise<void> {
    try {
      const { key } = req.params
      console.log(`‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É: ${key}`)

      const setting = await SettingsService.getSettingByKey(key)

      if (!setting) {
        res.status(404).json({
          success: false,
          error: 'Setting not found'
        })
        return
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É
      let parsedValue: any = setting.value

      switch (setting.type) {
        case 'NUMBER':
          parsedValue = parseFloat(setting.value)
          break
        case 'BOOLEAN':
          parsedValue = setting.value === 'true'
          break
        case 'JSON':
          try {
            parsedValue = JSON.parse(setting.value)
          } catch {
            parsedValue = setting.value
          }
          break
      }

      res.json({
        success: true,
        data: {
          ...setting,
          parsedValue
        }
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch setting'
      })
    }
  }

  // POST /api/admin/settings - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static async upsertSettings(req: Request, res: Response): Promise<void> {
    try {
      const { settings } = req.body
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settings)

      if (!Array.isArray(settings)) {
        res.status(400).json({
          success: false,
          error: 'Settings must be an array'
        })
        return
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const validSettings: CreateSettingData[] = []

      for (const setting of settings) {
        if (!setting.key || !setting.category || setting.value === undefined) {
          console.warn('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:', setting)
          continue
        }

        validSettings.push({
          key: setting.key,
          value: setting.value.toString(),
          type: setting.type || 'STRING',
          category: setting.category,
          description: setting.description
        })
      }

      if (validSettings.length === 0) {
        res.status(400).json({
          success: false,
          error: 'No valid settings provided'
        })
        return
      }

      const results = await SettingsService.upsertManySettings(validSettings)

      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${results.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫`)

      res.json({
        success: true,
        data: results,
        message: `Successfully saved ${results.length} settings`
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to save settings'
      })
    }
  }

  // PUT /api/admin/settings/:key - –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É
  static async updateSetting(req: Request, res: Response): Promise<void> {
    try {
      const { key } = req.params
      const { value, type, category, description } = req.body

      console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${key}:`, { value, type, category })

      if (value === undefined) {
        res.status(400).json({
          success: false,
          error: 'Value is required'
        })
        return
      }

      const settingData: CreateSettingData = {
        key,
        value: value.toString(),
        type: type || 'STRING',
        category: category || 'general',
        description
      }

      const result = await SettingsService.upsertSetting(settingData)

      console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`)

      res.json({
        success: true,
        data: result
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to update setting'
      })
    }
  }

  // DELETE /api/admin/settings/:key - –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
  static async deleteSetting(req: Request, res: Response): Promise<void> {
    try {
      const { key } = req.params
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${key}`)

      const deleted = await SettingsService.deleteSetting(key)

      if (!deleted) {
        res.status(404).json({
          success: false,
          error: 'Setting not found or could not be deleted'
        })
        return
      }

      console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${key} —É–¥–∞–ª–µ–Ω–∞`)

      res.json({
        success: true,
        message: 'Setting deleted successfully'
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to delete setting'
      })
    }
  }

  // POST /api/admin/settings/initialize - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  static async initializeDefaultSettings(req: Request, res: Response): Promise<void> {
    try {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')

      const result = await SettingsService.initializeDefaultSettings()

      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result)

      res.json({
        success: true,
        data: result,
        message: `Initialized ${result.created} new settings, updated ${result.updated} existing settings`
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to initialize default settings'
      })
    }
  }

  // GET /api/admin/settings/categories - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  static async getCategories(req: Request, res: Response): Promise<void> {
    try {
      console.log('üìã –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫')

      const settings = await SettingsService.getAllSettings()
      const categories = [...new Set(settings.map(s => s.category))].sort()

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`, categories)

      res.json({
        success: true,
        data: categories
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch categories'
      })
    }
  }

  // GET /api/admin/settings/export - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  static async exportSettings(req: Request, res: Response): Promise<void> {
    try {
      console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫')

      const settings = await SettingsService.getAllSettings()

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const exportData = {
        exportDate: new Date().toISOString(),
        version: '1.0',
        settings: settings.map(setting => ({
          key: setting.key,
          value: setting.value,
          type: setting.type,
          category: setting.category,
          description: setting.description
        }))
      }

      res.setHeader('Content-Type', 'application/json')
      res.setHeader('Content-Disposition', 'attachment; filename=stc-settings-export.json')

      res.json(exportData)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to export settings'
      })
    }
  }
}
