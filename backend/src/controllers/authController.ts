import { Request, Response } from 'express'
import { AuthService } from '@/services/authService'

export class AuthController {
  /**
   * POST /api/auth/telegram - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telegram Web App
   */
  static async authenticateWithTelegram(req: Request, res: Response): Promise<void> {
    try {
      const { initData, userData } = req.body

      console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telegram...')
      console.log('üìù Init Data:', initData)
      console.log('üë§ User Data:', userData)

      // –ï—Å–ª–∏ –µ—Å—Ç—å initData, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –µ–≥–æ
      let verifiedUserData = userData
      if (initData) {
        try {
          verifiedUserData = AuthService.verifyTelegramWebAppData(initData)
          console.log('‚úÖ Telegram Web App data verified')
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not verify initData, using provided userData:', error)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        }
      }

      // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const result = await AuthService.authenticateUser(verifiedUserData)

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', result.user.id)

      res.json({
        success: true,
        data: result,
      })
    } catch (error) {
      console.error('‚ùå Error authenticating with Telegram:', error)
      res.status(401).json({
        success: false,
        error: 'Authentication failed',
        message: error instanceof Error ? error.message : 'Unknown error',
      })
    }
  }

  /**
   * POST /api/auth/driver/telegram - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Web App
   */
  static async authenticateDriverWithTelegram(req: Request, res: Response): Promise<void> {
    try {
      const { initData, userData } = req.body

      console.log('üöó –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram...')
      console.log('üìù Init Data:', initData)
      console.log('üë§ User Data:', userData)

      // –ï—Å–ª–∏ –µ—Å—Ç—å initData, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –µ–≥–æ
      let verifiedUserData = userData
      if (initData) {
        try {
          verifiedUserData = AuthService.verifyDriverTelegramWebAppData(initData)
          console.log('‚úÖ Driver Telegram Web App data verified')
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not verify initData, using provided userData:', error)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        }
      }

      // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
      const result = await AuthService.authenticateDriver(verifiedUserData)

      console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', result.driver.id)

      res.json({
        success: true,
        data: result,
      })
    } catch (error) {
      console.error('‚ùå Error authenticating driver with Telegram:', error)
      res.status(401).json({
        success: false,
        error: 'Authentication failed',
        message: error instanceof Error ? error.message : 'Unknown error',
      })
    }
  }

  /**
   * PUT /api/auth/phone - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  static async updatePhone(req: Request, res: Response): Promise<void> {
    try {
      const userId = (req as any).userId // –ò–∑ middleware
      const { phone } = req.body

      if (!phone) {
        res.status(400).json({
          success: false,
          error: 'Phone number is required',
        })
        return
      }

      console.log(`üìû –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)

      const result = await AuthService.updateUserPhone(userId, phone)

      res.json({
        success: true,
        data: result,
      })
    } catch (error) {
      console.error('‚ùå Error updating phone:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to update phone number',
      })
    }
  }

  /**
   * GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  static async getCurrentUser(req: Request, res: Response): Promise<void> {
    try {
      const userId = (req as any).userId // –ò–∑ middleware

      const authHeader = req.headers.authorization
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        res.status(401).json({
          success: false,
          error: 'No authorization token provided',
        })
        return
      }

      const token = authHeader.split(' ')[1]
      const user = await AuthService.getUserByToken(token)

      res.json({
        success: true,
        data: user,
      })
    } catch (error) {
      console.error('‚ùå Error getting current user:', error)
      res.status(401).json({
        success: false,
        error: 'Invalid or expired token',
      })
    }
  }

  /**
   * POST /api/auth/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  static async logout(req: Request, res: Response): Promise<void> {
    try {
      const userId = (req as any).userId // –ò–∑ middleware

      console.log(`üëã –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)

      await AuthService.logout(userId)

      res.json({
        success: true,
        message: 'Logged out successfully',
      })
    } catch (error) {
      console.error('‚ùå Error logging out:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to logout',
      })
    }
  }
}
