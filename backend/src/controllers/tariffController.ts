import { Request, Response } from 'express'
import { TariffService } from '../services/tariffService'

export class TariffController {
  // GET /api/admin/tariffs/matrix - –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
  static async getTariffMatrix(req: Request, res: Response): Promise<void> {
    try {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ç–∞—Ä–∏—Ñ–æ–≤...')

      const matrix = await TariffService.getTariffMatrix()

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: ${matrix.routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤, ${matrix.vehicleModels.length} –º–æ–¥–µ–ª–µ–π`)

      res.json({
        success: true,
        data: matrix
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ç–∞—Ä–∏—Ñ–æ–≤:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch tariff matrix'
      })
    }
  }

  // GET /api/admin/tariffs/vehicle-models - –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  static async getVehicleModels(req: Request, res: Response): Promise<void> {
    try {
      console.log('üöó –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...')

      const models = await TariffService.getVehicleModels()

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${models.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π`)

      res.json({
        success: true,
        data: models
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch vehicle models'
      })
    }
  }

  // GET /api/admin/tariffs/locations - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏
  static async getLocations(req: Request, res: Response): Promise<void> {
    try {
      console.log('üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π...')

      const locations = await TariffService.getLocations()

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${locations.length} –ª–æ–∫–∞—Ü–∏–π`)

      res.json({
        success: true,
        data: locations
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch locations'
      })
    }
  }

  // GET /api/admin/tariffs/routes - –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã
  static async getRoutes(req: Request, res: Response): Promise<void> {
    try {
      console.log('üõ£Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤...')

      const routes = await TariffService.getRoutes()

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤`)

      res.json({
        success: true,
        data: routes
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch routes'
      })
    }
  }

  // GET /api/admin/tariffs - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
  static async getTariffs(req: Request, res: Response): Promise<void> {
    try {
      console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤...')

      const tariffs = await TariffService.getTariffs()

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tariffs.length} —Ç–∞—Ä–∏—Ñ–æ–≤`)

      res.json({
        success: true,
        data: tariffs
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to fetch tariffs'
      })
    }
  }

  // POST /api/admin/tariffs - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ
  static async upsertTariff(req: Request, res: Response): Promise<void> {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞...', req.body)

      const {
        route_id,
        vehicle_brand,
        vehicle_model,
        base_price,
        price_per_km,
        minimum_price,
        night_surcharge_percent,
        holiday_surcharge_percent,
        waiting_price_per_minute,
        is_active,
        valid_from,
        valid_until
      } = req.body

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!route_id || !vehicle_brand || !vehicle_model) {
        res.status(400).json({
          success: false,
          error: 'Missing required fields: route_id, vehicle_brand, vehicle_model'
        })
        return
      }

      if (base_price === undefined && price_per_km === undefined) {
        res.status(400).json({
          success: false,
          error: 'Either base_price or price_per_km must be specified'
        })
        return
      }

      const tariff = await TariffService.upsertTariff({
        route_id: parseInt(route_id),
        vehicle_brand,
        vehicle_model,
        base_price: parseFloat(base_price) || 0,
        price_per_km: parseFloat(price_per_km) || 0,
        minimum_price: minimum_price ? parseFloat(minimum_price) : undefined,
        night_surcharge_percent: night_surcharge_percent ? parseFloat(night_surcharge_percent) : undefined,
        holiday_surcharge_percent: holiday_surcharge_percent ? parseFloat(holiday_surcharge_percent) : undefined,
        waiting_price_per_minute: waiting_price_per_minute ? parseFloat(waiting_price_per_minute) : undefined,
        is_active: is_active !== undefined ? Boolean(is_active) : true,
        valid_from: valid_from ? new Date(valid_from) : undefined,
        valid_until: valid_until ? new Date(valid_until) : undefined
      })

      console.log(`‚úÖ –¢–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${vehicle_brand} ${vehicle_model}`)

      res.json({
        success: true,
        data: tariff
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to save tariff'
      })
    }
  }

  // DELETE /api/admin/tariffs/:id - –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ
  static async deleteTariff(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params

      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ ${id}...`)

      await TariffService.deleteTariff(parseInt(id))

      console.log(`‚úÖ –¢–∞—Ä–∏—Ñ ${id} —É–¥–∞–ª–µ–Ω`)

      res.json({
        success: true,
        message: 'Tariff deleted successfully'
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to delete tariff'
      })
    }
  }

  // POST /api/admin/tariffs/locations - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
  static async createLocation(req: Request, res: Response): Promise<void> {
    try {
      console.log('üìç –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏...', req.body)

      const { name, type, coordinates } = req.body

      if (!name || !type) {
        res.status(400).json({
          success: false,
          error: 'Missing required fields: name, type'
        })
        return
      }

      const location = await TariffService.createLocation({
        name,
        type,
        coordinates
      })

      console.log(`‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${name}`)

      res.json({
        success: true,
        data: location
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to create location'
      })
    }
  }

  // POST /api/admin/tariffs/routes - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
  static async createRoute(req: Request, res: Response): Promise<void> {
    try {
      console.log('üõ£Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...', req.body)

      const { from_location_id, to_location_id, distance_km, estimated_duration_minutes } = req.body

      if (!from_location_id || !to_location_id) {
        res.status(400).json({
          success: false,
          error: 'Missing required fields: from_location_id, to_location_id'
        })
        return
      }

      if (from_location_id === to_location_id) {
        res.status(400).json({
          success: false,
          error: 'From and to locations cannot be the same'
        })
        return
      }

      const route = await TariffService.createRoute({
        from_location_id: parseInt(from_location_id),
        to_location_id: parseInt(to_location_id),
        distance_km: distance_km ? parseFloat(distance_km) : undefined,
        estimated_duration_minutes: estimated_duration_minutes ? parseInt(estimated_duration_minutes) : undefined
      })

      console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω: ${route.from_location.name} ‚Üí ${route.to_location.name}`)

      res.json({
        success: true,
        data: route
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error)
      res.status(500).json({
        success: false,
        error: 'Failed to create route'
      })
    }
  }
}
