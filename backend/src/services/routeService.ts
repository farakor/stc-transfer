import { prisma } from '@/utils/prisma'
import { VehicleService } from './vehicleService'
import { VehicleType } from '@prisma/client'

export interface PriceCalculationRequest {
  from: string
  to: string
  vehicleType: VehicleType
  distance?: number
  hours?: number // –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
}

export interface PriceCalculationResult {
  routeId?: number
  routeType: string
  vehicleType: VehicleType
  basePrice: number
  pricePerKm: number
  distance: number
  hours?: number // –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
  totalPrice: number
  currency: string
  breakdown: {
    label: string
    amount: number
  }[]
}

export class RouteService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  static async getActiveRoutes() {
    return await prisma.route.findMany({
      orderBy: {
        from_city: 'asc'
      }
    })
  }

  // –ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º
  static async findRouteByLocations(fromCity: string, toCity: string) {
    return await prisma.route.findFirst({
      where: {
        from_city: fromCity,
        to_city: toCity
      }
    })
  }

  // –ù–∞–π—Ç–∏ —Ç–∞—Ä–∏—Ñ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ª–æ–∫–∞—Ü–∏—è–º –∏ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  static async findTariffFromDatabase(fromLocation: string, toLocation: string, vehicleType: string) {
    try {
      console.log(`üîç Searching database tariff for: ${fromLocation} ‚Üí ${toLocation}, vehicle: ${vehicleType}`)

      // –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
      const route = await prisma.tariffRoute.findFirst({
        where: {
          from_location: { name: fromLocation },
          to_location: { name: toLocation },
          is_active: true
        },
        include: {
          from_location: true,
          to_location: true
        }
      })

      if (!route) {
        console.log('‚ùå Route not found in database')
        return null
      }

      console.log('‚úÖ Found route:', route.id, route.from_location.name, '‚Üí', route.to_location.name)

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
      const vehicles = await prisma.vehicle.findMany({
        where: {
          type: vehicleType as any
        },
        select: {
          brand: true,
          model: true
        }
      })

      if (vehicles.length === 0) {
        console.log('‚ùå No vehicles found for type:', vehicleType)
        return null
      }

      console.log(`‚úÖ Found ${vehicles.length} vehicles of type ${vehicleType}:`, vehicles.map(v => `${v.brand} ${v.model}`))

      // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º brand/model –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º
      const vehicleConditions = vehicles
        .filter(v => v.brand && v.model)
        .map(v => ({
          vehicle_brand: v.brand!,
          vehicle_model: v.model!
        }))

      if (vehicleConditions.length === 0) {
        console.log('‚ùå No valid brand/model combinations found')
        return null
      }

      // –ò—â–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      const tariff = await prisma.tariff.findFirst({
        where: {
          route_id: route.id,
          is_active: true,
          OR: vehicleConditions
        },
        include: {
          route: {
            include: {
              from_location: true,
              to_location: true
            }
          }
        }
      })

      if (tariff) {
        console.log('‚úÖ Found tariff:', tariff.id, tariff.vehicle_brand, tariff.vehicle_model)
        return {
          id: tariff.id,
          route_id: tariff.route_id,
          vehicle_brand: tariff.vehicle_brand,
          vehicle_model: tariff.vehicle_model,
          base_price: Number(tariff.base_price),
          price_per_km: Number(tariff.price_per_km),
          minimum_price: tariff.minimum_price ? Number(tariff.minimum_price) : undefined,
          night_surcharge_percent: tariff.night_surcharge_percent ? Number(tariff.night_surcharge_percent) : undefined,
          holiday_surcharge_percent: tariff.holiday_surcharge_percent ? Number(tariff.holiday_surcharge_percent) : undefined,
          waiting_price_per_minute: tariff.waiting_price_per_minute ? Number(tariff.waiting_price_per_minute) : undefined,
          is_active: tariff.is_active,
          route: {
            id: tariff.route.id,
            from_location: tariff.route.from_location,
            to_location: tariff.route.to_location,
            distance_km: tariff.route.distance_km ? Number(tariff.route.distance_km) : null,
            estimated_duration_minutes: tariff.route.estimated_duration_minutes,
            is_active: tariff.route.is_active
          }
        }
      }

      console.log('‚ùå Tariff not found for vehicle type:', vehicleType)
      return null

    } catch (error) {
      console.error('‚ùå Error searching database tariff:', error)
      return null
    }
  }


  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
  static async calculatePrice(request: PriceCalculationRequest): Promise<PriceCalculationResult> {
    console.log('üîç Calculating price for:', request)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbTariff = await this.findTariffFromDatabase(request.from, request.to, request.vehicleType)

    if (dbTariff) {
      console.log('üí∞ Using database tariff:', dbTariff)

      const distance = dbTariff.route.distance_km || 0
      const basePrice = dbTariff.base_price
      const pricePerKm = dbTariff.price_per_km
      const distancePrice = pricePerKm * distance
      const totalPrice = basePrice + distancePrice

      const result = {
        routeId: dbTariff.route.id,
        routeType: 'FIXED', // –ò—Å–ø–æ–ª—å–∑—É–µ–º FIXED –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ –ë–î
        vehicleType: request.vehicleType,
        basePrice,
        pricePerKm,
        distance,
        totalPrice,
        currency: 'UZS',
        breakdown: [
          {
            label: 'pricing.baseRouteCost',
            amount: basePrice
          },
          {
            label: 'pricing.transportDistance',
            amount: distancePrice,
            distance: distance
          }
        ]
      }

      console.log('‚úÖ Database tariff calculation result:', result)
      return result
    }

    // –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É
    console.error(`‚ùå Tariff not found for route: ${request.from} ‚Üí ${request.to}, vehicle: ${request.vehicleType}`)
    throw new Error(
      `–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ "${request.from} ‚Üí ${request.to}" –∏ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "${request.vehicleType}". ` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.`
    )
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  static async getPopularDestinations() {
    const popularRoutes = await prisma.route.findMany({
      where: {
        is_popular: true
      },
      orderBy: {
        from_city: 'asc'
      },
      take: 10
    })

    return popularRoutes.map(route => ({
      id: route.id,
      name: `${route.from_city} ‚Üí ${route.to_city}`,
      fromCity: route.from_city,
      toCity: route.to_city,
      distance: route.distance,
      duration: route.duration,
      basePrice: route.base_price,
      type: this.getDestinationType(route.to_city),
      icon: this.getDestinationIcon(route.to_city)
    }))
  }

  private static getDestinationType(cityName: string): string {
    const name = cityName.toLowerCase()
    if (name.includes('—Å–∞–º–∞—Ä–∫–∞–Ω–¥')) return 'landmark'
    if (name.includes('–±—É—Ö–∞—Ä–∞')) return 'landmark'
    if (name.includes('—Ö–∏–≤–∞')) return 'landmark'
    return 'city'
  }

  private static getDestinationIcon(cityName: string): string {
    const name = cityName.toLowerCase()
    if (name.includes('—Å–∞–º–∞—Ä–∫–∞–Ω–¥')) return 'üèõÔ∏è'
    if (name.includes('–±—É—Ö–∞—Ä–∞')) return 'üïå'
    if (name.includes('—Ö–∏–≤–∞')) return 'üè∞'
    if (name.includes('—Ç–∞—à–∫–µ–Ω—Ç')) return 'üèôÔ∏è'
    if (name.includes('–∞–Ω–¥–∏–∂–∞–Ω')) return 'üåæ'
    if (name.includes('—Ñ–µ—Ä–≥–∞–Ω–∞')) return 'üèîÔ∏è'
    return 'üìç'
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID
  static async getRouteById(id: number) {
    return await prisma.route.findUnique({
      where: { id }
    })
  }
}
