import { prisma } from '@/utils/prisma'
import { VehicleService } from './vehicleService'
import { VehicleServiceMock } from './vehicleServiceMock'
import { VehicleType } from '@prisma/client'

export interface PriceCalculationRequest {
  from: string
  to: string
  vehicleType: VehicleType
  distance?: number
  hours?: number // –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
}

export interface PriceCalculationResult {
  routeId?: number
  routeType: string
  vehicleType: VehicleType
  basePrice: number
  pricePerKm: number
  distance: number
  hours?: number // –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
  totalPrice: number
  currency: string
  breakdown: {
    label: string
    amount: number
  }[]
}

export class RouteService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  static async getActiveRoutes() {
    return await prisma.route.findMany({
      orderBy: {
        from_city: 'asc'
      }
    })
  }

  // –ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º
  static async findRouteByLocations(fromCity: string, toCity: string) {
    try {
      return await prisma.route.findFirst({
        where: {
          from_city: fromCity,
          to_city: toCity
        }
      })
    } catch (error) {
      console.warn('‚ö†Ô∏è Database not available, using base pricing')
      return null
    }
  }

  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º –∏ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–∏–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞)
  private static FIXED_PRICES: Record<string, Record<string, number>> = {
    // –û—Ç–µ–ª–∏ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –≥–æ—Ä–æ–¥–µ - 20,000 —Å—É–º –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    'Hilton Samarkand Regency': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    'Silk Road by Minyoun': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    'Savitsky Plaza': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    'Lia! by Minyoun Stars of Ulugbek': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    'Hilton Garden Inn Samarkand Afrosiyob': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    'Hilton Garden Inn Samarkand Sogd': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    'Wellness Park Hotel Bactria': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    'Wellness Park Hotel Turon': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    '–ö–æ–Ω–≥—Ä–µ—Å—Å —Ü–µ–Ω—Ç—Ä': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    '–ê–π–≤–∞–Ω': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    '–í–µ—á–Ω—ã–π –ì–æ—Ä–æ–¥': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },
    '–§–æ–Ω—Ç–∞–Ω': {
      'BUS': 20000, 'MICROBUS': 20000, 'MINIVAN': 20000, 'PREMIUM': 20000, 'SEDAN': 20000
    },

    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç': {
      'BUS': 780000,           // –ê–≤—Ç–æ–±—É—Å Higer
      'MICROBUS': 650000,      // Mercedes Sprinter
      'MINIVAN': 400000,       // Kia Carnival
      'PREMIUM': 400000,       // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 9
      'SEDAN': 150000          // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5
    },
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç –°–∞–º–∞—Ä–∫–∞–Ω–¥–∞': {
      'BUS': 780000,
      'MICROBUS': 650000,
      'MINIVAN': 400000,
      'PREMIUM': 400000,
      'SEDAN': 150000
    },
    '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª': {
      'BUS': 780000,
      'MICROBUS': 650000,
      'MINIVAN': 400000,
      'PREMIUM': 400000,
      'SEDAN': 150000
    },
    '–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É': {
      'BUS': 2600000,          // –ê–≤—Ç–æ–±—É—Å Higer
      'MICROBUS': 3000000,     // Mercedes Sprinter
      'MINIVAN': 2000000,      // Kia Carnival
      'PREMIUM': 2000000,      // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 9
      'SEDAN': 845000          // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5
    },
    '–ü–æ–µ–∑–¥–∫–∞ –≤ –®–∞—Ö—Ä–∏—Å–∞–±–∑': {
      'SEDAN': 3500000,        // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5
      'MINIVAN': 2200000       // Kia Carnival
    },
    '–ü–æ–µ–∑–¥–∫–∞ –≤ –ù—É—Ä–∞—Ç—É': {
      'SEDAN': 5200000,        // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5
      'MINIVAN': 3000000       // Kia Carnival
    },
    '–ü–æ–µ–∑–¥–∫–∞ –≤ –ë—É—Ö–∞—Ä—É': {
      'SEDAN': 6100000,        // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5
      'MICROBUS': 3900000,     // Mercedes Sprinter
      'MINIVAN': 3600000       // Kia Carnival
    },
    '–ü–æ–µ–∑–¥–∫–∞ –≤ –¢–∞—à–∫–µ–Ω—Ç': {
      'SEDAN': 6500000,        // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5
      'MICROBUS': 4300000,     // Mercedes Sprinter
      'MINIVAN': 3900000       // Kia Carnival
    },
    '–ü–æ–µ–∑–¥–∫–∞ –≤ –•–∏–≤—É': {
      // –¶–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ (########)
    }
  }

  // –ü–æ—á–∞—Å–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É (–∏–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞)
  private static HOURLY_RATES: Record<string, { hourly: number; perKm: number }> = {
    'BUS': { hourly: 325000, perKm: 0 },           // –ê–≤—Ç–æ–±—É—Å Higer: 325,000 –∑–∞ 1 —á–∞—Å
    'PREMIUM': { hourly: 400000, perKm: 40000 },   // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 9: 40,000 –∑–∞ 1 –∫–º + 400,000 –∑–∞ 1 —á–∞—Å –æ–∂–∏–¥–∞–Ω–∏—è
    'SEDAN': { hourly: 150000, perKm: 15000 }      // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5: 15,000 –∑–∞ 1 –∫–º + 150,000 –∑–∞ 1 —á–∞—Å –æ–∂–∏–¥–∞–Ω–∏—è
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
  static async calculatePrice(request: PriceCalculationRequest): Promise<PriceCalculationResult> {
    console.log('üîç Calculating price for:', request)

    const destination = request.to
    const vehicleType = request.vehicleType

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const fixedPrice = this.FIXED_PRICES[destination]?.[vehicleType]

    if (fixedPrice) {
      console.log(`üí∞ Using fixed price: ${fixedPrice} UZS for ${destination} with ${vehicleType}`)

      const result = {
        routeId: undefined,
        routeType: 'FIXED',
        vehicleType: request.vehicleType,
        basePrice: 0,
        pricePerKm: 0,
        distance: 0,
        totalPrice: fixedPrice,
        currency: 'UZS',
        breakdown: [
          {
            label: `–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${destination}`,
            amount: fixedPrice
          }
        ]
      }

      console.log('‚úÖ Fixed price calculation result:', result)
      return result
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É (–ø–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞)
    if (destination === '–ü–æ–µ–∑–¥–∫–∞ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É') {
      const hourlyRate = this.HOURLY_RATES[vehicleType]

      if (hourlyRate) {
        const hours = request.hours || 1 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
        const distance = request.distance || 0

        const hourlyPrice = hourlyRate.hourly * hours
        const distancePrice = hourlyRate.perKm * distance
        const totalPrice = hourlyPrice + distancePrice

        const result = {
          routeId: undefined,
          routeType: 'HOURLY',
          vehicleType: request.vehicleType,
          basePrice: 0,
          pricePerKm: hourlyRate.perKm,
          distance: distance,
          hours: hours,
          totalPrice,
          currency: 'UZS',
          breakdown: [
            {
              label: `–ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ (${hours} —á)`,
              amount: hourlyPrice
            },
            ...(distance > 0 ? [{
              label: `–ü—Ä–æ–±–µ–≥ (${distance} –∫–º)`,
              amount: distancePrice
            }] : [])
          ]
        }

        console.log('‚úÖ Hourly price calculation result:', result)
        return result
      }
    }

    // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å —Ä–∞—Å—á–µ—Ç–æ–º –ø–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂—É
    return this.calculateCustomPrice(request)
  }

  // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  private static async calculateCustomPrice(request: PriceCalculationRequest): Promise<PriceCalculationResult> {
    console.log('üîç Calculating custom price for:', request)

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç
    const route = await this.findRouteByLocations(request.from, request.to)
    console.log('üìç Found route:', route)

    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –∑–∞ –∫–º
    let vehicles;
    try {
      vehicles = await VehicleService.getVehiclesByType(request.vehicleType)
    } catch (error) {
      console.warn('‚ö†Ô∏è Database not available, using mock data')
      vehicles = await VehicleServiceMock.getVehiclesByType(request.vehicleType)
    }
    console.log('üöó Found vehicles:', vehicles?.length || 0)

    const vehicle = vehicles[0]

    if (!vehicle) {
      console.error('‚ùå No vehicle found for type:', request.vehicleType)
      throw new Error(`Vehicle type ${request.vehicleType} not found`)
    }

    const pricePerKm = Number(vehicle.price_per_km)
    let distance = request.distance || 10 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let basePrice = Number(route?.base_price || 0)
    let routeType = 'CUSTOM'

    if (route) {
      distance = route.distance
      basePrice = Number(route.base_price)
      routeType = 'FIXED'
    }

    const distancePrice = pricePerKm * distance
    const totalPrice = basePrice + distancePrice

    const result = {
      routeId: route?.id,
      routeType,
      vehicleType: request.vehicleType,
      basePrice,
      pricePerKm,
      distance,
      totalPrice,
      currency: 'UZS',
      breakdown: [
        {
          label: '–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞',
          amount: basePrice
        },
        {
          label: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (${distance} –∫–º)`,
          amount: distancePrice
        }
      ]
    }

    console.log('‚úÖ Custom price calculation result:', result)
    return result
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  static async getPopularDestinations() {
    try {
      const popularRoutes = await prisma.route.findMany({
        where: {
          is_popular: true
        },
        orderBy: {
          from_city: 'asc'
        },
        take: 10
      })

      return popularRoutes.map(route => ({
        id: route.id,
        name: `${route.from_city} ‚Üí ${route.to_city}`,
        fromCity: route.from_city,
        toCity: route.to_city,
        distance: route.distance,
        duration: route.duration,
        basePrice: route.base_price,
        type: this.getDestinationType(route.to_city),
        icon: this.getDestinationIcon(route.to_city)
      }))
    } catch (error) {
      console.warn('‚ö†Ô∏è Database not available for popular destinations, using mock data')
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      return [
        {
          id: 1,
          name: '–°–∞–º–∞—Ä–∫–∞–Ω–¥ ‚Üí –¢–∞—à–∫–µ–Ω—Ç',
          fromCity: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
          toCity: '–¢–∞—à–∫–µ–Ω—Ç',
          distance: 300,
          duration: 240,
          basePrice: 100000,
          type: 'city',
          icon: 'üèõÔ∏è'
        },
        {
          id: 2,
          name: '–ë—É—Ö–∞—Ä–∞ ‚Üí –¢–∞—à–∫–µ–Ω—Ç',
          fromCity: '–ë—É—Ö–∞—Ä–∞',
          toCity: '–¢–∞—à–∫–µ–Ω—Ç',
          distance: 450,
          duration: 300,
          basePrice: 120000,
          type: 'landmark',
          icon: 'üïå'
        },
        {
          id: 3,
          name: '–¢–∞—à–∫–µ–Ω—Ç ‚Üí –°–∞–º–∞—Ä–∫–∞–Ω–¥',
          fromCity: '–¢–∞—à–∫–µ–Ω—Ç',
          toCity: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
          distance: 300,
          duration: 240,
          basePrice: 100000,
          type: 'city',
          icon: 'üèõÔ∏è'
        }
      ]
    }
  }

  private static getDestinationType(cityName: string): string {
    const name = cityName.toLowerCase()
    if (name.includes('—Å–∞–º–∞—Ä–∫–∞–Ω–¥')) return 'landmark'
    if (name.includes('–±—É—Ö–∞—Ä–∞')) return 'landmark'
    if (name.includes('—Ö–∏–≤–∞')) return 'landmark'
    return 'city'
  }

  private static getDestinationIcon(cityName: string): string {
    const name = cityName.toLowerCase()
    if (name.includes('—Å–∞–º–∞—Ä–∫–∞–Ω–¥')) return 'üèõÔ∏è'
    if (name.includes('–±—É—Ö–∞—Ä–∞')) return 'üïå'
    if (name.includes('—Ö–∏–≤–∞')) return 'üè∞'
    if (name.includes('—Ç–∞—à–∫–µ–Ω—Ç')) return 'üèôÔ∏è'
    if (name.includes('–∞–Ω–¥–∏–∂–∞–Ω')) return 'üåæ'
    if (name.includes('—Ñ–µ—Ä–≥–∞–Ω–∞')) return 'üèîÔ∏è'
    return 'üìç'
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID
  static async getRouteById(id: number) {
    return await prisma.route.findUnique({
      where: { id }
    })
  }
}
