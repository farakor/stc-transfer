import { prisma } from '@/utils/prisma'
import { VehicleService } from './vehicleService'
import { VehicleServiceMock } from './vehicleServiceMock'
import { VehicleType } from '@prisma/client'

export interface PriceCalculationRequest {
  from: string
  to: string
  vehicleType: VehicleType
  distance?: number
}

export interface PriceCalculationResult {
  routeId?: number
  routeType: string
  vehicleType: VehicleType
  basePrice: number
  pricePerKm: number
  distance: number
  totalPrice: number
  currency: string
  breakdown: {
    label: string
    amount: number
  }[]
}

export class RouteService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  static async getActiveRoutes() {
    return await prisma.route.findMany({
      orderBy: {
        from_city: 'asc'
      }
    })
  }

  // –ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º
  static async findRouteByLocations(fromCity: string, toCity: string) {
    try {
      return await prisma.route.findFirst({
        where: {
          from_city: fromCity,
          to_city: toCity
        }
      })
    } catch (error) {
      console.warn('‚ö†Ô∏è Database not available, using base pricing')
      return null
    }
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
  static async calculatePrice(request: PriceCalculationRequest): Promise<PriceCalculationResult> {
    console.log('üîç Calculating price for:', request)

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç
    const route = await this.findRouteByLocations(request.from, request.to)
    console.log('üìç Found route:', route)

    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –∑–∞ –∫–º
    let vehicles;
    try {
      vehicles = await VehicleService.getVehiclesByType(request.vehicleType)
    } catch (error) {
      console.warn('‚ö†Ô∏è Database not available, using mock data')
      vehicles = await VehicleServiceMock.getVehiclesByType(request.vehicleType)
    }
    console.log('üöó Found vehicles:', vehicles?.length || 0)

    const vehicle = vehicles[0]

    if (!vehicle) {
      console.error('‚ùå No vehicle found for type:', request.vehicleType)
      throw new Error(`Vehicle type ${request.vehicleType} not found`)
    }

    const pricePerKm = Number(vehicle.price_per_km)
    let distance = request.distance || 10 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let basePrice = Number(route?.base_price || 0)
    let routeType = 'CUSTOM'

    if (route) {
      distance = route.distance
      basePrice = Number(route.base_price)
      routeType = 'FIXED'
    }

    const distancePrice = pricePerKm * distance
    const totalPrice = basePrice + distancePrice

    const result = {
      routeId: route?.id,
      routeType,
      vehicleType: request.vehicleType,
      basePrice,
      pricePerKm,
      distance,
      totalPrice,
      currency: 'UZS',
      breakdown: [
        {
          label: '–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞',
          amount: basePrice
        },
        {
          label: `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (${distance} –∫–º)`,
          amount: distancePrice
        }
      ]
    }

    console.log('‚úÖ Price calculation result:', result)
    return result
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  static async getPopularDestinations() {
    try {
      const popularRoutes = await prisma.route.findMany({
        where: {
          is_popular: true
        },
        orderBy: {
          from_city: 'asc'
        },
        take: 10
      })

      return popularRoutes.map(route => ({
        id: route.id,
        name: `${route.from_city} ‚Üí ${route.to_city}`,
        fromCity: route.from_city,
        toCity: route.to_city,
        distance: route.distance,
        duration: route.duration,
        basePrice: route.base_price,
        type: this.getDestinationType(route.to_city),
        icon: this.getDestinationIcon(route.to_city)
      }))
    } catch (error) {
      console.warn('‚ö†Ô∏è Database not available for popular destinations, using mock data')
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      return [
        {
          id: 1,
          name: '–°–∞–º–∞—Ä–∫–∞–Ω–¥ ‚Üí –¢–∞—à–∫–µ–Ω—Ç',
          fromCity: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
          toCity: '–¢–∞—à–∫–µ–Ω—Ç',
          distance: 300,
          duration: 240,
          basePrice: 100000,
          type: 'city',
          icon: 'üèõÔ∏è'
        },
        {
          id: 2,
          name: '–ë—É—Ö–∞—Ä–∞ ‚Üí –¢–∞—à–∫–µ–Ω—Ç',
          fromCity: '–ë—É—Ö–∞—Ä–∞',
          toCity: '–¢–∞—à–∫–µ–Ω—Ç',
          distance: 450,
          duration: 300,
          basePrice: 120000,
          type: 'landmark',
          icon: 'üïå'
        },
        {
          id: 3,
          name: '–¢–∞—à–∫–µ–Ω—Ç ‚Üí –°–∞–º–∞—Ä–∫–∞–Ω–¥',
          fromCity: '–¢–∞—à–∫–µ–Ω—Ç',
          toCity: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
          distance: 300,
          duration: 240,
          basePrice: 100000,
          type: 'city',
          icon: 'üèõÔ∏è'
        }
      ]
    }
  }

  private static getDestinationType(cityName: string): string {
    const name = cityName.toLowerCase()
    if (name.includes('—Å–∞–º–∞—Ä–∫–∞–Ω–¥')) return 'landmark'
    if (name.includes('–±—É—Ö–∞—Ä–∞')) return 'landmark'
    if (name.includes('—Ö–∏–≤–∞')) return 'landmark'
    return 'city'
  }

  private static getDestinationIcon(cityName: string): string {
    const name = cityName.toLowerCase()
    if (name.includes('—Å–∞–º–∞—Ä–∫–∞–Ω–¥')) return 'üèõÔ∏è'
    if (name.includes('–±—É—Ö–∞—Ä–∞')) return 'üïå'
    if (name.includes('—Ö–∏–≤–∞')) return 'üè∞'
    if (name.includes('—Ç–∞—à–∫–µ–Ω—Ç')) return 'üèôÔ∏è'
    if (name.includes('–∞–Ω–¥–∏–∂–∞–Ω')) return 'üåæ'
    if (name.includes('—Ñ–µ—Ä–≥–∞–Ω–∞')) return 'üèîÔ∏è'
    return 'üìç'
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID
  static async getRouteById(id: number) {
    return await prisma.route.findUnique({
      where: { id }
    })
  }
}
