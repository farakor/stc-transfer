import TelegramBot from 'node-telegram-bot-api'
import { Request, Response, NextFunction } from 'express'

export class TelegramBotService {
  private static instance: TelegramBotService
  private bot: TelegramBot
  private token: string

  private constructor() {
    this.token = process.env.TELEGRAM_BOT_TOKEN!
    if (!this.token) {
      throw new Error('TELEGRAM_BOT_TOKEN is required')
    }

    // Initialize bot without polling (we'll use webhooks)
    this.bot = new TelegramBot(this.token, { polling: false })

    this.setupWebhook()
    console.log('ü§ñ Telegram Bot Service initialized')
  }

  public static getInstance(): TelegramBotService {
    if (!TelegramBotService.instance) {
      TelegramBotService.instance = new TelegramBotService()
    }
    return TelegramBotService.instance
  }

  private async setupWebhook() {
    try {
      const webhookUrl = `${process.env.TELEGRAM_WEBHOOK_URL}/webhook`
      await this.bot.setWebHook(webhookUrl)
      console.log(`üîó Webhook set to: ${webhookUrl}`)
    } catch (error) {
      console.error('‚ùå Failed to set webhook:', error)
    }
  }

  public handleWebhook(req: Request, res: Response, next: NextFunction) {
    try {
      const update = req.body

      if (update.message) {
        this.handleMessage(update.message)
      }

      if (update.callback_query) {
        this.handleCallbackQuery(update.callback_query)
      }

      res.status(200).send('OK')
    } catch (error) {
      console.error('‚ùå Webhook error:', error)
      next(error)
    }
  }

  private async handleMessage(message: any) {
    const chatId = message.chat.id
    const text = message.text

    if (text === '/start') {
      await this.sendWelcomeMessage(chatId)
    }
  }

  private async handleCallbackQuery(callbackQuery: any) {
    const chatId = callbackQuery.message.chat.id
    // Handle callback queries here
  }

  private async sendWelcomeMessage(chatId: number) {
    const welcomeText = `
üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ STC Transfer!

–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É –∏ –≤ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑.
    `

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üöó –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä',
            web_app: { url: process.env.TELEGRAM_WEBHOOK_URL || '' }
          }
        ]
      ]
    }

    try {
      await this.bot.sendMessage(chatId, welcomeText, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      })
    } catch (error) {
      console.error('‚ùå Failed to send welcome message:', error)
    }
  }

  public async sendNotification(chatId: number, message: string) {
    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' })
    } catch (error) {
      console.error('‚ùå Failed to send notification:', error)
      throw error
    }
  }

  public async sendBookingNotification(chatId: number, bookingData: any) {
    const message = `
üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!

üìç –ú–∞—Ä—à—Ä—É—Ç: ${bookingData.fromLocation} ‚Üí ${bookingData.toLocation}
üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${bookingData.vehicleType}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${bookingData.price} —Å—É–º

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
    `

    await this.sendNotification(chatId, message)
  }

  public async sendStatusUpdateNotification(chatId: number, booking: any, status: string) {
    let message = ''

    switch (status) {
      case 'CONFIRMED':
        message = `
‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

üìç –ú–∞—Ä—à—Ä—É—Ç: ${booking.fromLocation} ‚Üí ${booking.toLocation}
üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${booking.vehicle?.brand} ${booking.vehicle?.model}
üöó –ù–æ–º–µ—Ä: ${booking.vehicle?.licensePlate}
üë§ –í–æ–¥–∏—Ç–µ–ª—å: ${booking.driver?.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.driver?.phone}

–í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º!
        `
        break

      case 'IN_PROGRESS':
        message = `
üöó –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!

–í–æ–¥–∏—Ç–µ–ª—å ${booking.driver?.name} –Ω–∞—á–∞–ª –ø–æ–µ–∑–¥–∫—É.
–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!
        `
        break

      case 'COMPLETED':
        message = `
üéØ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!
–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.

üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.price} —Å—É–º
        `
        break

      case 'CANCELLED':
        message = `
‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω

–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.
        `
        break

      default:
        message = `
üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω

–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${status}
        `
    }

    await this.sendNotification(chatId, message)
  }

  public async sendDispatcherNotification(booking: any) {
    const dispatcherChatId = process.env.DISPATCHER_CHAT_ID
    if (!dispatcherChatId) return

    const message = `
üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó

üìç –ú–∞—Ä—à—Ä—É—Ç: ${booking.fromLocation} ‚Üí ${booking.toLocation}
üë§ –ö–ª–∏–µ–Ω—Ç: ${booking.user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üöó –¢–∏–ø –¢–°: ${booking.vehicleType}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.price} —Å—É–º
üïí –í—Ä–µ–º—è: ${booking.pickupTime ? new Date(booking.pickupTime).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${booking.notes || '–ù–µ—Ç'}

ID –∑–∞–∫–∞–∑–∞: ${booking.id}
    `

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${booking.id}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${booking.id}` }
        ],
        [
          { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `details_${booking.id}` }
        ]
      ]
    }

    try {
      await this.bot.sendMessage(Number(dispatcherChatId), message, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      })
    } catch (error) {
      console.error('‚ùå Failed to send dispatcher notification:', error)
    }
  }
}
