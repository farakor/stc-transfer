import TelegramBot from 'node-telegram-bot-api'
import { Request, Response, NextFunction } from 'express'
import { PrismaClient } from '@prisma/client'
import { getBotMessage, Language } from '../locales/botMessages'

const prisma = new PrismaClient()

export class TelegramBotService {
  private static instance: TelegramBotService
  private bot: TelegramBot
  private token: string

  private constructor() {
    this.token = process.env.TELEGRAM_BOT_TOKEN!
    if (!this.token) {
      throw new Error('TELEGRAM_BOT_TOKEN is required')
    }

    // Initialize bot without polling (we'll use webhooks)
    this.bot = new TelegramBot(this.token, { polling: false })

    this.setupWebhook()
    console.log('ü§ñ Telegram Bot Service initialized')
  }

  public static getInstance(): TelegramBotService {
    if (!TelegramBotService.instance) {
      TelegramBotService.instance = new TelegramBotService()
    }
    return TelegramBotService.instance
  }

  private async setupWebhook() {
    try {
      const webhookUrl = `${process.env.TELEGRAM_WEBHOOK_URL}/webhook`
      await this.bot.setWebHook(webhookUrl)
      console.log(`üîó Webhook set to: ${webhookUrl}`)
    } catch (error) {
      console.error('‚ùå Failed to set webhook:', error)
    }
  }

  public handleWebhook(req: Request, res: Response, next: NextFunction) {
    try {
      const update = req.body

      if (update.message) {
        this.handleMessage(update.message)
      }

      if (update.callback_query) {
        this.handleCallbackQuery(update.callback_query)
      }

      res.status(200).send('OK')
    } catch (error) {
      console.error('‚ùå Webhook error:', error)
      next(error)
    }
  }

  private async handleMessage(message: any) {
    const chatId = message.chat.id
    const text = message.text
    const telegramId = message.from.id.toString()

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    if (message.contact) {
      await this.handleContactShared(message)
      return
    }

    if (text === '/start') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –≤—ã–±—Ä–∞–Ω –ª–∏ —è–∑—ã–∫
      const user = await this.getOrCreateUser(message.from)
      
      if (user.language_code === 'ru' && !message.text.includes('change_lang')) {
        // –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        await this.sendLanguageSelection(chatId)
      } else if (!user.phone || !user.is_phone_verified) {
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        await this.requestPhoneNumber(chatId, user.language_code as Language)
      } else {
        // –ï—Å–ª–∏ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await this.sendWelcomeMessage(chatId, user.language_code as Language)
      }
    } else if (text === '/language') {
      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
      await this.sendLanguageSelection(chatId)
    }
  }

  private async handleContactShared(message: any) {
    const chatId = message.chat.id
    const contact = message.contact
    const telegramId = message.from.id.toString()

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º
      if (contact.user_id && contact.user_id.toString() !== telegramId) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —á—É–∂–∏–º –Ω–æ–º–µ—Ä–æ–º
        await this.bot.sendMessage(
          chatId,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\nPlease share your phone number.\nIltimos, telefon raqamingizni ulashing.'
        )
        return
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const user = await prisma.user.update({
        where: { telegram_id: telegramId },
        data: {
          phone: contact.phone_number,
          is_phone_verified: true,
        },
      })

      const language = (user.language_code || 'ru') as Language
      const messages = getBotMessage(language)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.bot.sendMessage(chatId, messages.phoneVerified, {
        reply_markup: {
          remove_keyboard: true,
        },
      })

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await this.sendWelcomeMessage(chatId, language)
    } catch (error) {
      console.error('‚ùå Error handling contact:', error)
      await this.bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\nAn error occurred. Please try again.\nXatolik yuz berdi. Qayta urinib ko\'ring.'
      )
    }
  }

  private async requestPhoneNumber(chatId: number, language: Language = 'ru') {
    const messages = getBotMessage(language)

    const keyboard = {
      keyboard: [
        [
          {
            text: messages.sharePhone,
            request_contact: true,
          },
        ],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }

    try {
      await this.bot.sendMessage(chatId, messages.phoneRequest, {
        reply_markup: keyboard,
      })
    } catch (error) {
      console.error('‚ùå Failed to request phone number:', error)
    }
  }

  private async handleCallbackQuery(callbackQuery: any) {
    const chatId = callbackQuery.message.chat.id
    const data = callbackQuery.data
    const telegramId = callbackQuery.from.id.toString()

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if (data?.startsWith('lang_')) {
      const language = data.split('_')[1] as Language
      const user = await this.updateUserLanguage(telegramId, language)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚úÖ',
      })
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        await this.bot.deleteMessage(chatId, callbackQuery.message.message_id)
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (!user.phone || !user.is_phone_verified) {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await this.requestPhoneNumber(chatId, language)
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await this.sendWelcomeMessage(chatId, language)
      }
    } else if (data === 'change_language') {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
      await this.bot.answerCallbackQuery(callbackQuery.id)
      await this.sendLanguageSelection(chatId)
    }
  }

  private async getUserPhotoUrl(userId: number): Promise<string | null> {
    try {
      const photos = await this.bot.getUserProfilePhotos(userId, { limit: 1 })
      
      if (photos.total_count > 0 && photos.photos.length > 0) {
        const photo = photos.photos[0]
        // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const largestPhoto = photo[photo.length - 1]
        const file = await this.bot.getFile(largestPhoto.file_id)
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–æ—Ç–æ
        return `https://api.telegram.org/file/bot${this.token}/${file.file_path}`
      }
    } catch (error) {
      console.error('‚ùå Error getting user photo:', error)
    }
    
    return null
  }

  private async getOrCreateUser(from: any) {
    const telegramId = from.id.toString()
    
    let user = await prisma.user.findUnique({
      where: { telegram_id: telegramId },
    })

    // –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    const photoUrl = await this.getUserPhotoUrl(from.id)

    if (!user) {
      user = await prisma.user.create({
        data: {
          telegram_id: telegramId,
          first_name: from.first_name,
          last_name: from.last_name,
          username: from.username,
          language_code: 'ru', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π, –Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –≤—ã–±–æ—Ä
          photo_url: photoUrl,
        },
      })
    } else if (photoUrl && user.photo_url !== photoUrl) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      user = await prisma.user.update({
        where: { id: user.id },
        data: { photo_url: photoUrl },
      })
    }

    return user
  }

  private async updateUserLanguage(telegramId: string, language: Language) {
    return await prisma.user.update({
      where: { telegram_id: telegramId },
      data: { language_code: language },
    })
  }

  private async sendLanguageSelection(chatId: number) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' },
        ],
        [
          { text: 'üá∫üá∏ English', callback_data: 'lang_en' },
        ],
        [
          { text: 'üá∫üáø O\'zbek', callback_data: 'lang_uz' },
        ],
      ],
    }

    try {
      await this.bot.sendMessage(
        chatId,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nPlease select your language:\nIltimos, tilni tanlang:',
        {
          reply_markup: keyboard,
        }
      )
    } catch (error) {
      console.error('‚ùå Failed to send language selection:', error)
    }
  }

  private async sendWelcomeMessage(chatId: number, language: Language = 'ru') {
    const messages = getBotMessage(language)
    
    const welcomeText = `
${messages.welcome.title}

${messages.welcome.description}

${messages.languageSelected}
    `

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —è–∑—ã–∫–∞
    const webAppUrl = process.env.TELEGRAM_WEBAPP_URL || process.env.TELEGRAM_WEBHOOK_URL || ''
    const urlWithLang = `${webAppUrl}?lang=${language}`
    
    console.log('üåê Sending Web App URL:', urlWithLang)
    console.log('üåê Language:', language)

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: messages.welcome.openApp,
            web_app: { url: urlWithLang }
          }
        ],
        [
          {
            text: 'üåê Change language / –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / Tilni o\'zgartirish',
            callback_data: 'change_language'
          }
        ]
      ]
    }

    try {
      await this.bot.sendMessage(chatId, welcomeText, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      })
      console.log('‚úÖ Welcome message sent successfully')
    } catch (error) {
      console.error('‚ùå Failed to send welcome message:', error)
    }
  }

  public async sendNotification(chatId: number, message: string) {
    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' })
    } catch (error) {
      console.error('‚ùå Failed to send notification:', error)
      throw error
    }
  }

  public async sendBookingNotification(chatId: number, bookingData: any) {
    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = bookingData.userId || bookingData.user_id
    if (!userId) {
      console.error('‚ùå User ID not found in booking data')
      return
    }
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
    })
    const language = (user?.language_code || 'ru') as Language
    const messages = getBotMessage(language)

    const message = `
${messages.booking.created}

${messages.booking.route}: ${bookingData.fromLocation} ‚Üí ${bookingData.toLocation}
${messages.booking.vehicle}: ${bookingData.vehicleType}
${messages.booking.price}: ${bookingData.price} ${language === 'uz' ? 'so\'m' : language === 'en' ? 'sum' : '—Å—É–º'}

${messages.booking.contact}
    `

    await this.sendNotification(chatId, message)
  }

  public async sendStatusUpdateNotification(chatId: number, booking: any, status: string) {
    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = booking.user_id || booking.userId
    if (!userId) {
      console.error('‚ùå User ID not found in booking')
      return
    }
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
    })
    const language = (user?.language_code || 'ru') as Language
    const messages = getBotMessage(language)
    const currency = language === 'uz' ? 'so\'m' : language === 'en' ? 'sum' : '—Å—É–º'
    
    let message = ''

    switch (status) {
      case 'CONFIRMED':
        message = `
${messages.status.confirmed.title}

${messages.status.confirmed.route}: ${booking.fromLocation || booking.from_location} ‚Üí ${booking.toLocation || booking.to_location}
${messages.status.confirmed.vehicle}: ${booking.vehicle?.brand} ${booking.vehicle?.model}
${messages.status.confirmed.number}: ${booking.vehicle?.licensePlate || booking.vehicle?.license_plate}
${messages.status.confirmed.driver}: ${booking.driver?.name}
${messages.status.confirmed.phone}: ${booking.driver?.phone}

${messages.status.confirmed.message}
        `
        break

      case 'IN_PROGRESS':
        message = `
${messages.status.inProgress.title}

${messages.status.inProgress.message}
        `
        break

      case 'COMPLETED':
        message = `
${messages.status.completed.title}

${messages.status.completed.thanks}
${messages.status.completed.again}

${messages.status.completed.totalPrice}: ${booking.price} ${currency}
        `
        break

      case 'CANCELLED':
        message = `
${messages.status.cancelled.title}

${messages.status.cancelled.message}
${messages.status.cancelled.question}
        `
        break

      default:
        message = `
üìä ${language === 'en' ? 'Order status changed' : language === 'uz' ? 'Buyurtma holati o\'zgartirildi' : '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω'}

${language === 'en' ? 'New status' : language === 'uz' ? 'Yangi holat' : '–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å'}: ${status}
        `
    }

    await this.sendNotification(chatId, message)
  }

  public async sendDispatcherNotification(booking: any) {
    const dispatcherChatId = process.env.DISPATCHER_CHAT_ID
    if (!dispatcherChatId) return

    const message = `
üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó

üìç –ú–∞—Ä—à—Ä—É—Ç: ${booking.fromLocation} ‚Üí ${booking.toLocation}
üë§ –ö–ª–∏–µ–Ω—Ç: ${booking.user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üöó –¢–∏–ø –¢–°: ${booking.vehicleType}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.price} —Å—É–º
üïí –í—Ä–µ–º—è: ${booking.pickupTime ? new Date(booking.pickupTime).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${booking.notes || '–ù–µ—Ç'}

ID –∑–∞–∫–∞–∑–∞: ${booking.id}
    `

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${booking.id}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${booking.id}` }
        ],
        [
          { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `details_${booking.id}` }
        ]
      ]
    }

    try {
      await this.bot.sendMessage(Number(dispatcherChatId), message, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      })
    } catch (error) {
      console.error('‚ùå Failed to send dispatcher notification:', error)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
  public async sendDriverAssignmentNotification(chatId: number, booking: any, driver: any) {
    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = booking.user_id || booking.userId
    if (!userId) {
      console.error('‚ùå User ID not found in booking')
      return
    }
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
    })
    const language = (user?.language_code || 'ru') as Language
    const messages = getBotMessage(language)

    const message = `
${messages.driver.assigned}

${messages.status.confirmed.route}: ${booking.fromLocation || booking.from_location} ‚Üí ${booking.toLocation || booking.to_location}
${messages.status.confirmed.driver}: ${driver.name}
${messages.status.confirmed.phone}: ${driver.phone}
${messages.status.confirmed.vehicle}: ${booking.vehicle?.brand} ${booking.vehicle?.model}
${messages.status.confirmed.number}: ${booking.vehicle?.licensePlate || booking.vehicle?.license_plate}

${messages.driver.onTheWay}
    `

    try {
      await this.sendNotification(chatId, message)
    } catch (error) {
      console.error('‚ùå Failed to send driver assignment notification:', error)
      throw error
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  public async sendDriverNewOrderNotification(driverTelegramId: string, booking: any) {
    const message = `
üöó –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω!

üìç –ú–∞—Ä—à—Ä—É—Ç: ${booking.from_location} ‚Üí ${booking.to_location}
üë§ –ö–ª–∏–µ–Ω—Ç: ${booking.user?.name || booking.user?.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.user?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.price} —Å—É–º
üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ${booking.pickup_time ? new Date(booking.pickup_time).toLocaleString('ru-RU') : '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'}
${booking.notes ? `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${booking.notes}` : ''}

‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.
    `

    try {
      await this.sendMessage(Number(driverTelegramId), message)
    } catch (error) {
      console.error('‚ùå Failed to send driver new order notification:', error)
      throw error
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑
  public async sendDriverAcceptedNotification(chatId: number, booking: any, driver: any) {
    const userId = booking.user_id || booking.userId
    if (!userId) {
      console.error('‚ùå User ID not found in booking')
      return
    }
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
    })
    const language = (user?.language_code || 'ru') as Language
    const messages = getBotMessage(language)

    const formatPhone = (phone: string) => {
      const cleaned = phone.replace(/\D/g, '')
      if (cleaned.length === 12 && cleaned.startsWith('998')) {
        return `+${cleaned.slice(0, 3)} ${cleaned.slice(3, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8, 10)} ${cleaned.slice(10)}`
      }
      return phone
    }

    const message = `
‚úÖ <b>–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑!</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
   ‚û§ ${booking.fromLocation || booking.from_location} ‚Üí ${booking.toLocation || booking.to_location}

üöó <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formatPhone(driver.phone)}
üöô <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${booking.vehicle?.brand} ${booking.vehicle?.model}
üî¢ <b>–ù–æ–º–µ—Ä:</b> ${booking.vehicle?.licensePlate || booking.vehicle?.license_plate}

‚è∞ <b>–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ –≤—ã–µ–¥–µ—Ç –∫ –≤–∞–º!</b>
    `.trim()

    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' })
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${chatId}`)
    } catch (error) {
      console.error('‚ùå Failed to send driver accepted notification:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–π—Å
  public async sendTripStartedNotification(chatId: number, booking: any, driver: any) {
    const userId = booking.user_id || booking.userId
    if (!userId) {
      console.error('‚ùå User ID not found in booking')
      return
    }
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
    })
    const language = (user?.language_code || 'ru') as Language
    const messages = getBotMessage(language)

    const message = `
üöÄ <b>–†–µ–π—Å –Ω–∞—á–∞–ª—Å—è!</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
   ‚û§ ${booking.fromLocation || booking.from_location} ‚Üí ${booking.toLocation || booking.to_location}

üöó <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}
üöô <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${booking.vehicle?.brand} ${booking.vehicle?.model} (${booking.vehicle?.licensePlate || booking.vehicle?.license_plate})

üéØ <b>–í—ã –≤ –ø—É—Ç–∏!</b> –ü—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏! üõ£Ô∏è
    `.trim()

    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' })
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–π—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${chatId}`)
    } catch (error) {
      console.error('‚ùå Failed to send trip started notification:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  public async sendTripCompletedNotification(chatId: number, booking: any) {
    const userId = booking.user_id || booking.userId
    if (!userId) {
      console.error('‚ùå User ID not found in booking')
      return
    }
    
    const user = await prisma.user.findUnique({
      where: { id: userId },
    })
    const language = (user?.language_code || 'ru') as Language
    const messages = getBotMessage(language)

    const formatPrice = (price: number) => {
      return new Intl.NumberFormat('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(price)
    }

    const message = `
üèÅ <b>–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
   ‚û§ ${booking.fromLocation || booking.from_location} ‚Üí ${booking.toLocation || booking.to_location}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${formatPrice(Number(booking.price || booking.total_price))} —Å—É–º

‚ú® <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!</b>

üåü –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!
    `.trim()

    try {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' })
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${chatId}`)
    } catch (error) {
      console.error('‚ùå Failed to send trip completed notification:', error)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
  public async sendCancellationNotification(chatId: number, bookingId: string, reason?: string) {
    const message = `
‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω

ID –∑–∞–∫–∞–∑–∞: ${bookingId}
${reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${reason}` : ''}

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. 
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.
    `

    try {
      await this.sendNotification(chatId, message)
    } catch (error) {
      console.error('‚ùå Failed to send cancellation notification:', error)
      throw error
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  public async sendMessage(chatId: number, message: string, options?: any): Promise<void> {
    try {
      await this.bot.sendMessage(chatId, message, options)
      console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      throw error
    }
  }
}
