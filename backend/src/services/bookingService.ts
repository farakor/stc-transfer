import { prisma } from '@/utils/prisma'
import { BookingStatus, VehicleType, RouteType, DriverStatus, VehicleStatus } from '@prisma/client'
import { VehicleService } from './vehicleService'
import { RouteService } from './routeService'
import { TelegramBotService } from './telegramBot'
import { DriverTelegramBotService } from './driverTelegramBot'

export interface CreateBookingData {
  telegramId: bigint
  fromLocation: string
  toLocation: string
  vehicleType: VehicleType
  pickupTime?: string
  notes?: string
  distanceKm?: number
}

export interface BookingDetails {
  id: string
  bookingNumber: string
  status: BookingStatus
  fromLocation: string
  toLocation: string
  price: number
  pickupTime?: Date
  notes?: string
  vehicleType?: VehicleType
  user: {
    name?: string
    phone?: string
    photoUrl?: string
    username?: string
    telegramId?: string
  }
  vehicle?: {
    id: number
    name: string
    brand: string
    model: string
    licensePlate: string
    wialonUnitId?: string | null
  }
  driver?: {
    name: string
    phone: string
  }
  createdAt: Date
}

export class BookingService {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –°–¢–¢-00001
  private static generateBookingNumber(sequenceNumber: number): string {
    const paddedNumber = sequenceNumber.toString().padStart(5, '0')
    return `–°–¢–¢-${paddedNumber}`
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ä—à—Ä—É—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ Route
  private static async validateRouteId(routeId: number): Promise<boolean> {
    try {
      const route = await prisma.route.findUnique({
        where: { id: routeId }
      })
      return !!route
    } catch (error) {
      console.error('‚ùå Error validating route ID:', error)
      return false
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  static async createBooking(data: CreateBookingData): Promise<BookingDetails> {
    console.log('üîç Creating booking for:', data)

    try {
      // 1. –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await prisma.user.findUnique({
        where: { telegram_id: String(data.telegramId) }
      })

      if (!user) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user = await prisma.user.create({
          data: {
            telegram_id: String(data.telegramId),
            language_code: 'ru'
          }
        })
      }

      // 2. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const priceCalculation = await RouteService.calculatePrice({
        from: data.fromLocation,
        to: data.toLocation,
        vehicleType: data.vehicleType,
        distance: data.distanceKm
      })

      // 3. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ë–ï–ó –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
      // –ö–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ booking_number –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è sequence_number
      const booking = await prisma.booking.create({
        data: {
          user_id: user.id,
          from_location: data.fromLocation,
          to_location: data.toLocation,
          route_type: priceCalculation.routeType as RouteType,
          distance_km: priceCalculation.distance,
          price: priceCalculation.totalPrice,
          total_price: priceCalculation.totalPrice,
          passenger_count: 1,
          status: BookingStatus.PENDING,
          pickup_time: data.pickupTime ? new Date(data.pickupTime) : null,
          notes: data.notes,
          // –ù–ï –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
          vehicle_id: null,
          driver_id: null,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è
          vehicle_type: data.vehicleType,
          // –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º route_id –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—É Route
          route_id: priceCalculation.routeId && await this.validateRouteId(priceCalculation.routeId) ? priceCalculation.routeId : null,
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ sequence_number
          booking_number: '' // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        },
        include: {
          user: true,
          vehicle: true,
          driver: true,
          route: true
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º booking_number –Ω–∞ –æ—Å–Ω–æ–≤–µ sequence_number
      const updatedBooking = await prisma.booking.update({
        where: { id: booking.id },
        data: {
          booking_number: this.generateBookingNumber(booking.sequence_number)
        },
        include: {
          user: true,
          vehicle: true,
          driver: true,
          route: true
        }
      })

      // 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      try {
        const telegramBot = TelegramBotService.getInstance()

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await telegramBot.sendBookingNotification(Number(data.telegramId), {
          userId: updatedBooking.user_id,
          fromLocation: updatedBooking.from_location,
          toLocation: updatedBooking.to_location,
          vehicleType: data.vehicleType,
          price: updatedBooking.price
        })

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        await telegramBot.sendDispatcherNotification({
          id: updatedBooking.id,
          fromLocation: updatedBooking.from_location,
          toLocation: updatedBooking.to_location,
          vehicleType: data.vehicleType,
          price: updatedBooking.price,
          pickupTime: updatedBooking.pickup_time,
          notes: updatedBooking.notes,
          user: {
            name: updatedBooking.user.name || updatedBooking.user.first_name,
            phone: updatedBooking.user.phone
          }
        })

      } catch (error) {
        console.error('Failed to send notifications:', error)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      }

      return this.formatBookingDetails(updatedBooking)
    } catch (error) {
      console.error('‚ùå Error in createBooking:', error)
      throw error
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
  static async getBookingById(id: string): Promise<BookingDetails | null> {
    const booking = await prisma.booking.findUnique({
      where: { id },
      include: {
        user: true,
        vehicle: true,
        driver: true,
        route: true
      }
    })

    return booking ? this.formatBookingDetails(booking) : null
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserBookings(telegramId: bigint, limit = 10) {
    const user = await prisma.user.findUnique({
      where: { telegram_id: String(telegramId) }
    })

    if (!user) {
      return []
    }

    const bookings = await prisma.booking.findMany({
      where: { user_id: user.id },
      include: {
        user: true,
        vehicle: true,
        driver: true,
        route: true
      },
      orderBy: {
        created_at: 'desc'
      },
      take: limit
    })

    return bookings.map(booking => this.formatBookingDetails(booking))
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  static async updateBookingStatus(id: string, status: BookingStatus, notes?: string) {
    const booking = await prisma.booking.update({
      where: { id },
      data: {
        status,
        ...(notes && { notes })
      },
      include: {
        user: true,
        vehicle: true,
        driver: true
      }
    })

    // –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ
    if (status === BookingStatus.COMPLETED || status === BookingStatus.CANCELLED) {
      if (booking.vehicle_id && booking.driver_id) {
        await Promise.all([
          VehicleService.updateVehicleStatus(booking.vehicle_id!, VehicleStatus.AVAILABLE),
          prisma.driver.update({
            where: { id: booking.driver_id! },
            data: { status: DriverStatus.AVAILABLE }
          })
        ])
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    try {
      const telegramBot = TelegramBotService.getInstance()
      await telegramBot.sendStatusUpdateNotification(
        Number(booking.user.telegram_id),
        booking,
        status
      )
    } catch (error) {
      console.error('Failed to send status update notification:', error)
    }

    return this.formatBookingDetails(booking)
  }

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∫ –∑–∞–∫–∞–∑—É
  static async assignVehicle(bookingId: string, vehicleId: string) {
    const vehicle = await prisma.vehicle.findUnique({
      where: { id: parseInt(vehicleId) },
      include: { driver: true }
    })

    if (!vehicle) {
      throw new Error('Vehicle not found')
    }

    if (vehicle.status !== VehicleStatus.AVAILABLE) {
      throw new Error('Vehicle is not available')
    }

    if (!vehicle.driver) {
      throw new Error('Vehicle has no assigned driver')
    }

    if (vehicle.driver.status !== DriverStatus.AVAILABLE) {
      throw new Error('Vehicle driver is not available')
    }

    const booking = await prisma.booking.update({
      where: { id: bookingId },
      data: {
        vehicle_id: vehicle.id,
        driver_id: vehicle.driver.id,
        status: BookingStatus.VEHICLE_ASSIGNED // –ú–∞—à–∏–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –∂–¥–µ–º –ø—Ä–∏–Ω—è—Ç–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–º
      },
      include: {
        user: true,
        vehicle: true,
        driver: true
      }
    })

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –Ω–æ –≤–æ–¥–∏—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
    await VehicleService.updateVehicleStatus(vehicle.id, VehicleStatus.BUSY)

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    try {
      const telegramBot = TelegramBotService.getInstance()
      await telegramBot.sendDriverAssignmentNotification(
        Number(booking.user.telegram_id),
        {
          fromLocation: booking.from_location,
          toLocation: booking.to_location,
          vehicle: booking.vehicle
        },
        booking.driver
      )
    } catch (error) {
      console.error('Failed to send vehicle assignment notification to client:', error)
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    try {
      if (booking.driver?.telegram_id) {
        const driverBot = DriverTelegramBotService.getInstance()
        await driverBot.sendNewOrderNotification(
          booking.driver.telegram_id,
          booking
        )
        console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é ${booking.driver.name} (ID: ${booking.driver.telegram_id})`)
      } else {
        console.warn(`‚ö†Ô∏è –£ –≤–æ–¥–∏—Ç–µ–ª—è ${booking.driver?.name} –Ω–µ—Ç telegram_id, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`)
      }
    } catch (error) {
      console.error('Failed to send new order notification to driver:', error)
    }

    return this.formatBookingDetails(booking)
  }

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –∫ –∑–∞–∫–∞–∑—É
  static async assignDriver(bookingId: string, driverId: string) {
    const driver = await prisma.driver.findUnique({
      where: { id: parseInt(driverId) },
      include: { vehicle: true }
    })

    if (!driver) {
      throw new Error('Driver not found')
    }

    if (driver.status !== DriverStatus.AVAILABLE) {
      throw new Error('Driver is not available')
    }

    const booking = await prisma.booking.update({
      where: { id: bookingId },
      data: {
        driver_id: driver.id,
        vehicle_id: driver.vehicle_id,
        status: BookingStatus.VEHICLE_ASSIGNED // –ú–∞—à–∏–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –∂–¥–µ–º –ø—Ä–∏–Ω—è—Ç–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–º
      },
      include: {
        user: true,
        vehicle: true,
        driver: true
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –Ω–æ –≤–æ–¥–∏—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
    await VehicleService.updateVehicleStatus(driver.vehicle_id!, VehicleStatus.BUSY)

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    try {
      const telegramBot = TelegramBotService.getInstance()
      await telegramBot.sendDriverAssignmentNotification(
        Number(booking.user.telegram_id),
        {
          fromLocation: booking.from_location,
          toLocation: booking.to_location,
          vehicle: booking.vehicle
        },
        booking.driver
      )
    } catch (error) {
      console.error('Failed to send driver assignment notification to client:', error)
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    try {
      if (booking.driver?.telegram_id) {
        const driverBot = DriverTelegramBotService.getInstance()
        await driverBot.sendNewOrderNotification(
          booking.driver.telegram_id,
          booking
        )
        console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é ${booking.driver.name} (ID: ${booking.driver.telegram_id})`)
      } else {
        console.warn(`‚ö†Ô∏è –£ –≤–æ–¥–∏—Ç–µ–ª—è ${booking.driver?.name} –Ω–µ—Ç telegram_id, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`)
      }
    } catch (error) {
      console.error('Failed to send new order notification to driver:', error)
    }

    return this.formatBookingDetails(booking)
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞)
  static async getActiveBookings() {
    const bookings = await prisma.booking.findMany({
      where: {
        status: {
          in: [BookingStatus.PENDING, BookingStatus.VEHICLE_ASSIGNED, BookingStatus.CONFIRMED, BookingStatus.IN_PROGRESS]
        }
      },
      include: {
        user: true,
        vehicle: true,
        driver: true,
        route: true
      },
      orderBy: {
        created_at: 'asc'
      }
    })

    return bookings.map(booking => this.formatBookingDetails(booking))
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
  static async getAllBookings() {
    const bookings = await prisma.booking.findMany({
      include: {
        user: true,
        vehicle: true,
        driver: true,
        route: true
      },
      orderBy: {
        created_at: 'desc' // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
      }
    })

    return bookings.map(booking => this.formatBookingDetails(booking))
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  static async getBookingStats(period?: 'day' | 'week' | 'month') {
    const now = new Date()
    let startDate: Date

    switch (period) {
      case 'day':
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate())
        break
      case 'week':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)
        break
      case 'month':
        startDate = new Date(now.getFullYear(), now.getMonth(), 1)
        break
      default:
        startDate = new Date(0) // –í—Å–µ –≤—Ä–µ–º—è
    }

    const [statusStats, totalRevenue, vehicleTypeStats] = await Promise.all([
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      prisma.booking.groupBy({
        by: ['status'],
        where: {
          created_at: { gte: startDate }
        },
        _count: {
          status: true
        }
      }),

      // –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
      prisma.booking.aggregate({
        where: {
          status: BookingStatus.COMPLETED,
          created_at: { gte: startDate }
        },
        _sum: {
          total_price: true
        }
      }),

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
      prisma.booking.groupBy({
        by: ['vehicle_id'],
        where: {
          created_at: { gte: startDate },
          vehicle_id: { not: null }
        },
        _count: {
          vehicle_id: true
        },
        _sum: {
          total_price: true
        }
      })
    ])

    return {
      period,
      statusStats,
      totalRevenue: totalRevenue._sum.total_price || 0,
      vehicleTypeStats
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  private static formatBookingDetails(booking: any): BookingDetails {
    return {
      id: booking.id,
      bookingNumber: booking.booking_number,
      status: booking.status,
      fromLocation: booking.from_location,
      toLocation: booking.to_location,
      price: Number(booking.price || booking.total_price || 0),
      pickupTime: booking.pickup_time,
      notes: booking.notes,
      vehicleType: booking.vehicle_type,
      user: {
        name: booking.user?.name || booking.user?.first_name,
        phone: booking.user?.phone,
        photoUrl: booking.user?.photo_url,
        username: booking.user?.username,
        telegramId: booking.user?.telegram_id
      },
      vehicle: booking.vehicle ? {
        id: booking.vehicle.id,
        name: booking.vehicle.name,
        brand: booking.vehicle.brand || booking.vehicle.name,
        model: booking.vehicle.model || '',
        licensePlate: booking.vehicle.license_plate || '',
        wialonUnitId: booking.vehicle.wialon_unit_id || null
      } : undefined,
      driver: booking.driver ? {
        name: booking.driver.name,
        phone: booking.driver.phone
      } : undefined,
      createdAt: booking.created_at
    }
  }

  // –ù–∞—á–∞—Ç—å —Ä–µ–π—Å
  static async startTrip(bookingId: string, driverId: number, location?: { lat: number, lng: number }) {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–π—Å ${bookingId} –≤–æ–¥–∏—Ç–µ–ª–µ–º ${driverId}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å CONFIRMED
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: {
        user: true,
        driver: true,
        vehicle: true
      }
    })

    if (!booking) {
      throw new Error('Booking not found')
    }

    if (booking.status !== BookingStatus.CONFIRMED && booking.status !== BookingStatus.PENDING) {
      throw new Error('Booking must be PENDING or CONFIRMED to start trip')
    }

    if (booking.driver_id !== driverId) {
      throw new Error('Driver is not assigned to this booking')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const updatedBooking = await prisma.booking.update({
      where: { id: bookingId },
      data: {
        status: BookingStatus.IN_PROGRESS,
        updated_at: new Date()
      },
      include: {
        user: true,
        driver: true,
        vehicle: true
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
    await prisma.driver.update({
      where: { id: driverId },
      data: { status: DriverStatus.BUSY }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ BUSY
    if (booking.vehicle_id) {
      await prisma.vehicle.update({
        where: { id: booking.vehicle_id },
        data: { 
          status: VehicleStatus.BUSY,
          updated_at: new Date()
        }
      })
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${booking.vehicle_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ BUSY`)
    }

    console.log(`‚úÖ –†–µ–π—Å ${bookingId} –Ω–∞—á–∞—Ç`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    try {
      if (booking.user.telegram_id) {
        const telegramBot = TelegramBotService.getInstance()
        await telegramBot.sendMessage(
          Number(booking.user.telegram_id),
          `üöó –í–∞—à —Ä–µ–π—Å –Ω–∞—á–∞—Ç!\n\n` +
          `üìç –ú–∞—Ä—à—Ä—É—Ç: ${booking.from_location} ‚Üí ${booking.to_location}\n` +
          `üë§ –í–æ–¥–∏—Ç–µ–ª—å: ${booking.driver?.name}\n` +
          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.driver?.phone}\n` +
          `üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${booking.vehicle?.brand} ${booking.vehicle?.model}\n` +
          `üî¢ –ì–æ—Å–Ω–æ–º–µ—Ä: ${booking.vehicle?.license_plate}\n\n` +
          `–ü—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏! üõ£Ô∏è`
        )
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–µ–π—Å–∞:', error)
    }

    return updatedBooking
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–π—Å
  static async completeTrip(bookingId: string, driverId: number, location?: { lat: number, lng: number }) {
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–π—Å ${bookingId} –≤–æ–¥–∏—Ç–µ–ª–µ–º ${driverId}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å IN_PROGRESS
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: {
        user: true,
        driver: true,
        vehicle: true
      }
    })

    if (!booking) {
      throw new Error('Booking not found')
    }

    if (booking.status !== BookingStatus.IN_PROGRESS) {
      throw new Error('Booking is not in progress')
    }

    if (booking.driver_id !== driverId) {
      throw new Error('Driver is not assigned to this booking')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const updatedBooking = await prisma.booking.update({
      where: { id: bookingId },
      data: {
        status: BookingStatus.COMPLETED,
        updated_at: new Date()
      },
      include: {
        user: true,
        driver: true,
        vehicle: true
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
    await prisma.driver.update({
      where: { id: driverId },
      data: { status: DriverStatus.AVAILABLE }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ AVAILABLE
    if (booking.vehicle_id) {
      await prisma.vehicle.update({
        where: { id: booking.vehicle_id },
        data: { 
          status: VehicleStatus.AVAILABLE,
          updated_at: new Date()
        }
      })
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${booking.vehicle_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ AVAILABLE`)
    }

    console.log(`‚úÖ –†–µ–π—Å ${bookingId} –∑–∞–≤–µ—Ä—à–µ–Ω`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    try {
      if (booking.user.telegram_id) {
        const telegramBot = TelegramBotService.getInstance()
        await telegramBot.sendMessage(
          Number(booking.user.telegram_id),
          `‚úÖ –í–∞—à —Ä–µ–π—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
          `üìç –ú–∞—Ä—à—Ä—É—Ç: ${booking.from_location} ‚Üí ${booking.to_location}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.price} —Å—É–º\n` +
          `üë§ –í–æ–¥–∏—Ç–µ–ª—å: ${booking.driver?.name}\n\n` +
          `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üôè\n` +
          `–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤.`
        )
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–π—Å–∞:', error)
    }

    return updatedBooking
  }
}
