import { prisma } from '@/utils/prisma'
import { SettingType } from '@prisma/client'

export interface CreateSettingData {
  key: string
  value: string
  type: SettingType
  category: string
  description?: string
}

export class SettingsService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static async getAllSettings() {
    return await prisma.systemSetting.findMany({
      orderBy: [
        { category: 'asc' },
        { key: 'asc' }
      ]
    })
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static async getSettingsByCategory(category: string) {
    return await prisma.systemSetting.findMany({
      where: { category },
      orderBy: { key: 'asc' }
    })
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –∫–ª—é—á—É
  static async getSettingByKey(key: string) {
    return await prisma.systemSetting.findUnique({
      where: { key }
    })
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
  static async upsertSetting(data: CreateSettingData) {
    return await prisma.systemSetting.upsert({
      where: { key: data.key },
      update: {
        value: data.value,
        type: data.type,
        category: data.category,
        description: data.description,
        updated_at: new Date()
      },
      create: {
        key: data.key,
        value: data.value,
        type: data.type,
        category: data.category,
        description: data.description
      }
    })
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  static async upsertManySettings(settings: CreateSettingData[]) {
    const results = []

    for (const setting of settings) {
      const result = await this.upsertSetting(setting)
      results.push(result)
    }

    return results
  }

  // –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
  static async deleteSetting(key: string) {
    try {
      await prisma.systemSetting.delete({
        where: { key }
      })
      return true
    } catch (error) {
      console.error('Error deleting setting:', error)
      return false
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  static async getSettingValue<T = any>(key: string, defaultValue?: T): Promise<T> {
    try {
      const setting = await this.getSettingByKey(key)

      if (!setting) {
        return defaultValue as T
      }

      switch (setting.type) {
        case 'NUMBER':
          return parseFloat(setting.value) as T
        case 'BOOLEAN':
          return (setting.value === 'true') as T
        case 'JSON':
          return JSON.parse(setting.value) as T
        default:
          return setting.value as T
      }
    } catch (error) {
      console.error(`Error getting setting value for key ${key}:`, error)
      return defaultValue as T
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  static async initializeDefaultSettings() {
    const defaultSettings: CreateSettingData[] = [
      // –¢–∞—Ä–∏—Ñ—ã
      {
        key: 'basePrice',
        value: '20000',
        type: 'NUMBER',
        category: 'tariffs',
        description: '–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ —Å—É–º–∞—Ö'
      },
      {
        key: 'minPrice',
        value: '15000',
        type: 'NUMBER',
        category: 'tariffs',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ —Å—É–º–∞—Ö'
      },
      {
        key: 'perKmRates',
        value: JSON.stringify({
          SEDAN: 1500,
          PREMIUM: 3000,
          MINIVAN: 2000,
          MICROBUS: 2500,
          BUS: 3000
        }),
        type: 'JSON',
        category: 'tariffs',
        description: '–¢–∞—Ä–∏—Ñ—ã –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
      },
      {
        key: 'nightSurcharge',
        value: '20',
        type: 'NUMBER',
        category: 'tariffs',
        description: '–ù–æ—á–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (22:00-06:00)'
      },
      {
        key: 'holidaySurcharge',
        value: '30',
        type: 'NUMBER',
        category: 'tariffs',
        description: '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö'
      },
      {
        key: 'waitingTimeRate',
        value: '500',
        type: 'NUMBER',
        category: 'tariffs',
        description: '–¢–∞—Ä–∏—Ñ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å—É–º–∞—Ö –∑–∞ –º–∏–Ω—É—Ç—É'
      },

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      {
        key: 'telegramBotToken',
        value: '',
        type: 'STRING',
        category: 'notifications',
        description: '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞'
      },
      {
        key: 'dispatcherChatId',
        value: '',
        type: 'STRING',
        category: 'notifications',
        description: 'Chat ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
      },
      {
        key: 'newOrderNotifications',
        value: 'true',
        type: 'BOOLEAN',
        category: 'notifications',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö'
      },
      {
        key: 'statusUpdateNotifications',
        value: 'true',
        type: 'BOOLEAN',
        category: 'notifications',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'
      },
      {
        key: 'driverAssignmentNotifications',
        value: 'true',
        type: 'BOOLEAN',
        category: 'notifications',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è'
      },
      {
        key: 'customerNotifications',
        value: 'true',
        type: 'BOOLEAN',
        category: 'notifications',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º'
      },
      {
        key: 'systemAlerts',
        value: 'true',
        type: 'BOOLEAN',
        category: 'notifications',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      },

      // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      {
        key: 'companyName',
        value: 'STC Transfer',
        type: 'STRING',
        category: 'general',
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'
      },
      {
        key: 'supportPhone',
        value: '+998 90 123 45 67',
        type: 'STRING',
        category: 'general',
        description: '–¢–µ–ª–µ—Ñ–æ–Ω —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
      },
      {
        key: 'supportEmail',
        value: 'support@stctransfer.uz',
        type: 'STRING',
        category: 'general',
        description: 'Email —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
      },
      {
        key: 'defaultLanguage',
        value: 'ru',
        type: 'STRING',
        category: 'general',
        description: '–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
      },
      {
        key: 'timezone',
        value: 'Asia/Tashkent',
        type: 'STRING',
        category: 'general',
        description: '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–∏—Å—Ç–µ–º—ã'
      },
      {
        key: 'currency',
        value: 'UZS',
        type: 'STRING',
        category: 'general',
        description: '–í–∞–ª—é—Ç–∞ —Å–∏—Å—Ç–µ–º—ã'
      },
      {
        key: 'workingHours',
        value: JSON.stringify({
          start: '06:00',
          end: '22:00'
        }),
        type: 'JSON',
        category: 'general',
        description: '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å–∏—Å—Ç–µ–º—ã'
      },
      {
        key: 'maxAdvanceBookingDays',
        value: '30',
        type: 'NUMBER',
        category: 'general',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞'
      }
    ]

    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...')

    let created = 0
    let updated = 0

    for (const setting of defaultSettings) {
      try {
        const existing = await this.getSettingByKey(setting.key)

        if (existing) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (existing.description !== setting.description) {
            await prisma.systemSetting.update({
              where: { key: setting.key },
              data: {
                description: setting.description,
                updated_at: new Date()
              }
            })
            updated++
          }
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          await this.upsertSetting(setting)
          created++
        }
      } catch (error) {
        console.error(`Error initializing setting ${setting.key}:`, error)
      }
    }

    console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ ${created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –Ω–∞—Å—Ç—Ä–æ–µ–∫`)
    return { created, updated }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  static async getSettingsGroupedByCategory() {
    const settings = await this.getAllSettings()

    const grouped: Record<string, any[]> = {}

    settings.forEach(setting => {
      if (!grouped[setting.category]) {
        grouped[setting.category] = []
      }

      let value: any = setting.value

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É
      switch (setting.type) {
        case 'NUMBER':
          value = parseFloat(setting.value)
          break
        case 'BOOLEAN':
          value = setting.value === 'true'
          break
        case 'JSON':
          try {
            value = JSON.parse(setting.value)
          } catch {
            value = setting.value
          }
          break
      }

      grouped[setting.category].push({
        ...setting,
        parsedValue: value
      })
    })

    return grouped
  }
}
