import TelegramBot from 'node-telegram-bot-api'
import { Request, Response, NextFunction } from 'express'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export class DriverTelegramBotService {
  private static instance: DriverTelegramBotService
  private bot: TelegramBot | null = null
  private token: string
  private isEnabled: boolean = false

  private constructor() {
    this.token = process.env.TELEGRAM_DRIVER_BOT_TOKEN || ''
    
    if (!this.token || this.token === 'YOUR_DRIVER_BOT_TOKEN_HERE') {
      console.warn('‚ö†Ô∏è  TELEGRAM_DRIVER_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω')
      this.isEnabled = false
      return
    }

    try {
      // Initialize bot without polling (we'll use webhooks)
      this.bot = new TelegramBot(this.token, { polling: false })
      this.isEnabled = true

      this.setupWebhook()
      console.log('üöó Driver Telegram Bot Service initialized')
    } catch (error) {
      console.error('‚ùå Failed to initialize driver bot:', error)
      this.isEnabled = false
    }
  }

  public static getInstance(): DriverTelegramBotService {
    if (!DriverTelegramBotService.instance) {
      DriverTelegramBotService.instance = new DriverTelegramBotService()
    }
    return DriverTelegramBotService.instance
  }

  private async setupWebhook() {
    if (!this.bot || !this.isEnabled) return

    try {
      const webhookUrl = `${process.env.TELEGRAM_DRIVER_WEBHOOK_URL}/webhook/driver`
      await this.bot.setWebHook(webhookUrl)
      console.log(`üîó Driver webhook set to: ${webhookUrl}`)
    } catch (error) {
      console.error('‚ùå Failed to set driver webhook:', error)
    }
  }

  public handleWebhook(req: Request, res: Response, next: NextFunction): void {
    if (!this.bot || !this.isEnabled) {
      console.warn('‚ö†Ô∏è Driver bot webhook called but bot is disabled')
      res.status(200).send('Driver bot disabled')
      return
    }

    try {
      const update = req.body
      console.log('üì• Driver bot webhook received:', JSON.stringify(update))

      if (update.message) {
        this.handleMessage(update.message)
      }

      if (update.callback_query) {
        this.handleCallbackQuery(update.callback_query)
      }

      res.status(200).send('OK')
    } catch (error) {
      console.error('‚ùå Driver webhook error:', error)
      next(error)
    }
  }

  private async handleMessage(message: any) {
    if (!this.bot) return

    const chatId = message.chat.id
    const text = message.text
    const telegramId = message.from.id.toString()

    console.log(`üöó Driver bot message from ${chatId}: ${text}`)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if (message.contact) {
      await this.handleContactShared(message)
      return
    }

    if (text === '/start') {
      console.log('üöÄ Sending welcome message to driver...')
      await this.checkDriverAndSendWelcome(chatId, telegramId)
    } else if (text === '/help') {
      await this.sendHelpMessage(chatId)
    } else if (text === '/status') {
      await this.sendStatusMessage(chatId, telegramId)
    }
  }

  private async handleCallbackQuery(callbackQuery: any) {
    // Handle callback queries here
    const chatId = callbackQuery.message.chat.id
    const data = callbackQuery.data

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
  }

  private async handleContactShared(message: any) {
    const chatId = message.chat.id
    const contact = message.contact
    const telegramId = message.from.id.toString()

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º
      if (contact.user_id && contact.user_id.toString() !== telegramId) {
        // –í–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —á—É–∂–∏–º –Ω–æ–º–µ—Ä–æ–º
        await this.bot!.sendMessage(
          chatId,
          '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
        )
        return
      }

      // –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const cleanPhone = contact.phone_number.replace(/\D/g, '')
      const formattedPhone = `+${cleanPhone}`

      console.log('üîç –ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
        original: contact.phone_number,
        clean: cleanPhone,
        formatted: formattedPhone
      })

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      const allDrivers = await prisma.driver.findMany({
        select: {
          id: true,
          phone: true,
          name: true
        }
      })

      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –Ω–æ–º–µ—Ä–∞—Ö
      const driver = allDrivers.find(d => {
        if (!d.phone) return false
        const dbPhoneClean = d.phone.replace(/\D/g, '')
        const match = dbPhoneClean === cleanPhone
        console.log(`  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${d.phone} (${dbPhoneClean}) === ${contact.phone_number} (${cleanPhone}): ${match}`)
        return match
      })

      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const fullDriver = driver ? await prisma.driver.findUnique({
        where: { id: driver.id }
      }) : null

      if (!fullDriver) {
        await this.bot!.sendMessage(
          chatId,
          '‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.'
        )
        return
      }

      console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', fullDriver.name)

      // –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –≤–æ–¥–∏—Ç–µ–ª—è
      await prisma.driver.update({
        where: { id: fullDriver.id },
        data: {
          telegram_id: telegramId
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.bot!.sendMessage(chatId, 
        '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è.', {
        reply_markup: {
          remove_keyboard: true,
        },
      })

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await this.sendWelcomeMessage(chatId)
    } catch (error) {
      console.error('‚ùå Error handling driver contact:', error)
      await this.bot!.sendMessage(
        chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      )
    }
  }

  private async checkDriverAndSendWelcome(chatId: number, telegramId: string) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id
      const driver = await prisma.driver.findFirst({
        where: { telegram_id: telegramId }
      })

      if (!driver) {
        // –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await this.requestPhoneNumber(chatId)
        return
      }

      // –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º welcome
      await this.sendWelcomeMessage(chatId)
    } catch (error) {
      console.error('‚ùå Error checking driver:', error)
      await this.sendWelcomeMessage(chatId)
    }
  }

  private async requestPhoneNumber(chatId: number) {
    const keyboard = {
      keyboard: [
        [
          {
            text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º',
            request_contact: true,
          },
        ],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    }

    try {
      await this.bot!.sendMessage(chatId, 
        'üìû –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤–æ–¥–∏—Ç–µ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.', 
        {
          reply_markup: keyboard,
        }
      )
    } catch (error) {
      console.error('‚ùå Failed to request phone number:', error)
    }
  }

  private async sendWelcomeMessage(chatId: number) {
    if (!this.bot) return

    const welcomeText = `
üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π STC Transfer!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚úÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
‚úÖ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–π—Å–∞–º–∏
‚úÖ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–æ–∫
‚úÖ –°–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/status - –í–∞—à —Å—Ç–∞—Ç—É—Å
    `

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üöó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è',
            web_app: { 
              url: process.env.TELEGRAM_DRIVER_WEBAPP_URL || 
                   process.env.TELEGRAM_DRIVER_WEBHOOK_URL + '/driver' || '' 
            }
          }
        ]
      ]
    }

    try {
      await this.bot.sendMessage(chatId, welcomeText, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      })
    } catch (error) {
      console.error('‚ùå Failed to send driver welcome message:', error)
    }
  }

  private async sendHelpMessage(chatId: number) {
    if (!this.bot) return

    const helpText = `
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è

üì± –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
3. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Ä–µ–π—Å" –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
5. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–π—Å" –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –í–∞—à —Å—Ç–∞—Ç—É—Å

üí° –°–æ–≤–µ—Ç: –î–µ—Ä–∂–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤!
    `

    try {
      await this.bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' })
    } catch (error) {
      console.error('‚ùå Failed to send help message:', error)
    }
  }

  private async sendStatusMessage(chatId: number, telegramId: string) {
    if (!this.bot) return

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
      const driver = await prisma.driver.findFirst({
        where: { telegram_id: telegramId },
        include: {
          vehicle: true,
          bookings: {
            where: {
              status: {
                in: ['VEHICLE_ASSIGNED', 'CONFIRMED', 'IN_PROGRESS']
              }
            }
          }
        }
      })

      if (!driver) {
        await this.bot.sendMessage(chatId, 
          '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.'
        )
        return
      }

      const statusText = `
üìä –í–∞—à —Å—Ç–∞—Ç—É—Å

üë§ –ò–º—è: ${driver.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone}
üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${driver.vehicle ? `${driver.vehicle.brand} ${driver.vehicle.model} (${driver.vehicle.license_plate})` : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤: ${driver.bookings.length}

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
      `

      await this.bot.sendMessage(chatId, statusText, { parse_mode: 'HTML' })
    } catch (error) {
      console.error('‚ùå Failed to send status message:', error)
      
      const fallbackText = `
üìä –í–∞—à —Å—Ç–∞—Ç—É—Å

üöó –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤: 0

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
      `
      
      await this.bot.sendMessage(chatId, fallbackText, { parse_mode: 'HTML' })
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  public async sendNewOrderNotification(driverTelegramId: string, booking: any) {
    if (!this.bot || !this.isEnabled) {
      console.warn('‚ö†Ô∏è Driver bot is disabled, skipping notification')
      return
    }

    const formatPrice = (price: number) => {
      return new Intl.NumberFormat('ru-RU', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(price)
    }

    const formatDate = (dateString: string) => {
      return new Date(dateString).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      })
    }

    const formatPhone = (phone: string) => {
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
      const cleaned = phone.replace(/\D/g, '')
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (cleaned.length === 12 && cleaned.startsWith('998')) {
        return `+${cleaned.slice(0, 3)} ${cleaned.slice(3, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8, 10)} ${cleaned.slice(10)}`
      }
      return phone
    }

    const clientPhone = booking.user?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'

    const message = `
üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Ññ${booking.booking_number || booking.id}</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
   ‚û§ –û—Ç–∫—É–¥–∞: ${booking.from_location}
   ‚û§ –ö—É–¥–∞: ${booking.to_location}
${booking.pickup_location ? `   üìå –¢–æ—á–∫–∞ –ø–æ–¥–∞—á–∏: ${booking.pickup_location}` : ''}
${booking.dropoff_location ? `   üìå –¢–æ—á–∫–∞ –≤—ã—Å–∞–¥–∫–∏: ${booking.dropoff_location}` : ''}

üë§ <b>–ü–∞—Å—Å–∞–∂–∏—Ä:</b> ${booking.user?.name || booking.user?.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formatPhone(clientPhone)}
${booking.passenger_count ? `üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${booking.passenger_count} —á–µ–ª.` : ''}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${formatPrice(Number(booking.price))} —Å—É–º
${booking.distance_km ? `üìè <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> ${booking.distance_km} –∫–º` : ''}
üïê <b>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:</b> ${booking.pickup_time ? formatDate(booking.pickup_time) : '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'}

${booking.notes ? `üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>\n${booking.notes}\n` : ''}
‚è∞ <b>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞!</b>
    `.trim()

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üöó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è',
            web_app: { 
              url: process.env.TELEGRAM_DRIVER_WEBAPP_URL || 
                   process.env.TELEGRAM_DRIVER_WEBHOOK_URL + '/driver' || '' 
            }
          }
        ]
      ]
    }

    try {
      await this.bot.sendMessage(Number(driverTelegramId), message, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      })
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é ${driverTelegramId}`)
    } catch (error) {
      console.error('‚ùå Failed to send new order notification to driver:', error)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    }
  }

  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ —Ä–µ–π—Å–∞
  public async sendTripReminderNotification(driverTelegramId: string, booking: any) {
    if (!this.bot || !this.isEnabled) return

    const message = `
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ–π—Å–µ!

üìç –ú–∞—Ä—à—Ä—É—Ç: ${booking.from_location} ‚Üí ${booking.to_location}
üë§ –ö–ª–∏–µ–Ω—Ç: ${booking.user?.name || booking.user?.first_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.user?.phone}
üïê –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: ${new Date(booking.pickup_time).toLocaleString('ru-RU')}

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–µ—Ö–∞—Ç—å –≤–æ–≤—Ä–µ–º—è!
    `

    try {
      await this.sendMessage(Number(driverTelegramId), message)
    } catch (error) {
      console.error('‚ùå Failed to send trip reminder:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
  public async sendCancellationNotification(driverTelegramId: string, bookingId: string, reason?: string) {
    if (!this.bot || !this.isEnabled) return

    const message = `
‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω

ID –∑–∞–∫–∞–∑–∞: ${bookingId}
${reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${reason}` : ''}

–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.
    `

    try {
      await this.sendMessage(Number(driverTelegramId), message)
    } catch (error) {
      console.error('‚ùå Failed to send cancellation notification to driver:', error)
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  public async sendMessage(chatId: number, message: string, options?: any): Promise<void> {
    if (!this.bot || !this.isEnabled) {
      throw new Error('Driver bot is not enabled')
    }

    try {
      await this.bot.sendMessage(chatId, message, options)
      console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é ${chatId}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é:', error)
      throw error
    }
  }

  public isDriverBotEnabled(): boolean {
    return this.isEnabled
  }
}

