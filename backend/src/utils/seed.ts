import { prisma } from './prisma'
import { VehicleType, VehicleStatus, DriverStatus, RouteType } from '@prisma/client'

async function main() {
  console.log('üå± Starting database seeding...')

  // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await prisma.booking.deleteMany()
  await prisma.driver.deleteMany()
  await prisma.vehicle.deleteMany()
  await prisma.route.deleteMany()
  await prisma.user.deleteMany()

  console.log('üóëÔ∏è Cleared existing data')

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞
  const vehicles = await Promise.all([
    // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5 (SEDAN)
    ...Array.from({ length: 3 }, (_, i) => prisma.vehicle.create({
      data: {
        name: '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5',
        type: VehicleType.SEDAN,
        capacity: 3,
        price_per_km: 1500,
        image_url: '/assets/ehs9.png',
        description: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –¥–æ 3 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤',
        features: ['–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥', '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', 'Wi-Fi', 'USB –∑–∞—Ä—è–¥–∫–∞'],
        status: VehicleStatus.AVAILABLE,
        brand: 'Hongqi',
        model: 'EHS 5',
        license_plate: `EHS5${String(i + 1).padStart(3, '0')}`
      }
    })),

    // –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 9 (PREMIUM)
    ...Array.from({ length: 2 }, (_, i) => prisma.vehicle.create({
      data: {
        name: '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 9',
        type: VehicleType.PREMIUM,
        capacity: 3,
        price_per_km: 3000,
        image_url: '/assets/ehs9.png',
        description: '–ü—Ä–µ–º–∏—É–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –∫–ª–∞—Å—Å–∞ –ª—é–∫—Å –¥–ª—è VIP –ø–æ–µ–∑–¥–æ–∫',
        features: ['–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–≤–æ–¥', '–ö–æ–∂–∞–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è', '–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞', '–ü—Ä–µ–º–∏—É–º –∞—É–¥–∏–æ', 'Wi-Fi'],
        status: VehicleStatus.AVAILABLE,
        brand: 'Hongqi',
        model: 'EHS 9',
        license_plate: `EHS9${String(i + 1).padStart(3, '0')}`
      }
    })),

    // Kia Carnival (MINIVAN)
    ...Array.from({ length: 3 }, (_, i) => prisma.vehicle.create({
      data: {
        name: 'Kia Carnival',
        type: VehicleType.MINIVAN,
        capacity: 5,
        price_per_km: 2000,
        image_url: '/assets/carnival-kia-black-30.png',
        description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –º–∏–Ω–∏–≤—ç–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã –¥–æ 5 —á–µ–ª–æ–≤–µ–∫',
        features: ['–ö–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å', 'USB –∑–∞—Ä—è–¥–∫–∞', '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Å–∞–ª–æ–Ω', '–ë–∞–≥–∞–∂–Ω–∏–∫'],
        status: VehicleStatus.AVAILABLE,
        brand: 'KIA',
        model: 'Carnival',
        license_plate: `CARN${String(i + 1).padStart(3, '0')}`
      }
    })),

    // Mercedes-Benz Sprinter (MICROBUS)
    ...Array.from({ length: 2 }, (_, i) => prisma.vehicle.create({
      data: {
        name: 'Mercedes-Benz Sprinter',
        type: VehicleType.MICROBUS,
        capacity: 16,
        price_per_km: 2500,
        image_url: '/assets/mercedes-benz-sprinter.png',
        description: '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø –¥–æ 16 —á–µ–ª–æ–≤–µ–∫',
        features: ['–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–ë–æ–ª—å—à–æ–π –±–∞–≥–∞–∂–Ω–∏–∫', '–£–¥–æ–±–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è', '–í—ã—Å–æ–∫–∞—è –∫—Ä—ã—à–∞'],
        status: VehicleStatus.AVAILABLE,
        brand: 'Mercedes-Benz',
        model: 'Sprinter',
        license_plate: `SPRT${String(i + 1).padStart(3, '0')}`
      }
    })),

    // –ê–≤—Ç–æ–±—É—Å Higer (BUS)
    prisma.vehicle.create({
      data: {
        name: '–ê–≤—Ç–æ–±—É—Å Higer',
        type: VehicleType.BUS,
        capacity: 30,
        price_per_km: 3000,
        image_url: '/assets/higer-bus.png',
        description: '–ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–±—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø –¥–æ 30 —á–µ–ª–æ–≤–µ–∫',
        features: ['–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–ë–æ–ª—å—à–æ–π –±–∞–≥–∞–∂–Ω–∏–∫', '–ú—è–≥–∫–∏–µ —Å–∏–¥–µ–Ω—å—è', '–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
        status: VehicleStatus.AVAILABLE,
        brand: 'Higer',
        model: 'Bus',
        license_plate: 'HIGER001'
      }
    })
  ])

  console.log(`üöó Created ${vehicles.length} vehicles`)

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
  const driverData = [
    { name: '–ë–æ–±–æ–º—É—Ä–æ–¥–æ–≤ –ñ–∞—Ö–æ–Ω–≥–∏—Ä', phone: '998991723113' },
    { name: '–ú–∞–Ω—Å—É—Ä–æ–≤ –î–∏–ª—à–æ–¥', phone: '998902518959' },
    { name: '–ú—É—Ö–∞–º–∞–¥–∏–µ–≤ –ó–æ–∫–∏—Ä', phone: '998915428606' },
    { name: '–•—É—Å–∞–Ω–æ–≤ –ñ–∞–º—à–µ–¥', phone: '998942863918' },
    { name: '–•–∞–∫–∏–º–æ–≤ –§–∏—Ä—É–∑', phone: '998915210787' },
    { name: '–•–∞–º–∏–¥–æ–≤ –≠—Ä–∫–∏–Ω', phone: '998972890383' },
    { name: '–°—É–≤–æ–Ω–æ–≤ –û–¥–∏–ª', phone: '998901907420' },
    { name: '–•—É—Å–∞–Ω–æ–≤ –†—É—Å–ª–∞–Ω', phone: '998904452270' },
    { name: '–ú–µ–ª–∏–±–∞–µ–≤ –û–π–±–µ–∫', phone: '998979210111' },
    { name: '–®–∞–¥–∏–µ–≤ –®—É—Ö—Ä–∞—Ç', phone: '998901957555' },
    { name: '–†–∞–¥–∂–∞–±–æ–≤ –°–∞–Ω–∂–∞—Ä', phone: '998915500010' },
    { name: '–û–±–ª–æ–∫—É–ª–æ–≤ –î–∏–ª—à–æ–¥', phone: '998915285814' },
    { name: '–®–æ–¥–∏–µ–≤ –ë–∞—Ö—Ç–∏—ë—Ä', phone: '998941857777' }
  ]

  const drivers = await Promise.all(
    driverData.slice(0, vehicles.length).map((driver, index) =>
      prisma.driver.create({
        data: {
          name: driver.name,
          phone: driver.phone,
          license: `DL${String(1000000 + index).substring(1)}`,
          vehicle_id: vehicles[index].id,
          status: DriverStatus.AVAILABLE
        }
      })
    )
  )

  console.log(`üë• Created ${drivers.length} drivers`)

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ RouteService FIXED_PRICES
  const routes = await Promise.all([
    // –ê—ç—Ä–æ–ø–æ—Ä—Ç –∏ –≤–æ–∫–∑–∞–ª - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è  
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ê—ç—Ä–æ–ø–æ—Ä—Ç',
        distance: 15,
        duration: 30,
        base_price: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ RouteService
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ê—ç—Ä–æ–ø–æ—Ä—Ç –°–∞–º–∞—Ä–∫–∞–Ω–¥–∞',
        distance: 15,
        duration: 30,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª',
        distance: 8,
        duration: 20,
        base_price: 0,
        is_popular: true
      }
    }),

    // –û—Ç–µ–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ 20,000 —Å—É–º
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Hilton Samarkand Regency',
        distance: 5,
        duration: 15,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Silk Road by Minyoun',
        distance: 4,
        duration: 12,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Savitsky Plaza',
        distance: 3,
        duration: 10,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Lia! by Minyoun Stars of Ulugbek',
        distance: 6,
        duration: 18,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Hilton Garden Inn Samarkand Afrosiyob',
        distance: 7,
        duration: 20,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Hilton Garden Inn Samarkand Sogd',
        distance: 5,
        duration: 15,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Wellness Park Hotel Bactria',
        distance: 8,
        duration: 25,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: 'Wellness Park Hotel Turon',
        distance: 9,
        duration: 27,
        base_price: 0,
        is_popular: true
      }
    }),

    // –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ö–æ–Ω–≥—Ä–µ—Å—Å —Ü–µ–Ω—Ç—Ä',
        distance: 4,
        duration: 12,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ê–π–≤–∞–Ω',
        distance: 3,
        duration: 10,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–í–µ—á–Ω—ã–π –ì–æ—Ä–æ–¥',
        distance: 5,
        duration: 15,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–§–æ–Ω—Ç–∞–Ω',
        distance: 2,
        duration: 8,
        base_price: 0,
        is_popular: true
      }
    }),

    // –≠–∫—Å–∫—É—Ä—Å–∏–∏ –∏ –¥–∞–ª—å–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É',
        distance: 50,
        duration: 180,
        base_price: 0,
        is_popular: true
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ü–æ–µ–∑–¥–∫–∞ –≤ –®–∞—Ö—Ä–∏—Å–∞–±–∑',
        distance: 80,
        duration: 90,
        base_price: 0,
        is_popular: false
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ü–æ–µ–∑–¥–∫–∞ –≤ –ù—É—Ä–∞—Ç—É',
        distance: 120,
        duration: 150,
        base_price: 0,
        is_popular: false
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ü–æ–µ–∑–¥–∫–∞ –≤ –ë—É—Ö–∞—Ä—É',
        distance: 270,
        duration: 240,
        base_price: 0,
        is_popular: false
      }
    }),
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ü–æ–µ–∑–¥–∫–∞ –≤ –¢–∞—à–∫–µ–Ω—Ç',
        distance: 300,
        duration: 240,
        base_price: 0,
        is_popular: false
      }
    }),

    // –ü–æ–µ–∑–¥–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É - –ø–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
    prisma.route.create({
      data: {
        from_city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
        to_city: '–ü–æ–µ–∑–¥–∫–∞ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É',
        distance: 25,
        duration: 60,
        base_price: 0,
        is_popular: true
      }
    })
  ])

  console.log(`üõ£Ô∏è Created ${routes.length} routes`)

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å pricing –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  console.log('üí∞ Skipped pricing entries (model not exists in schema)')

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const testUser = await prisma.user.create({
    data: {
      telegram_id: '12345',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phone: '+998901234567',
      language_code: 'ru'
    }
  })

  console.log(`üë§ Created test user: ${testUser.name}`)

  console.log('‚úÖ Database seeding completed successfully!')
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
