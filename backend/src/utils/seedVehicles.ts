import { prisma } from './prisma'
import { VehicleType, VehicleStatus } from '@prisma/client'

const vehiclesData = [
  {
    type: VehicleType.SEDAN,
    name: 'Hongqi EHS5',
    brand: 'Hongqi',
    model: 'EHS5',
    license_plate: '01 A 123 BC',
    capacity: 3,
    price_per_km: 1500,
    description: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –¥–æ 3 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤',
    features: ['–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', 'Wi-Fi', 'USB –∑–∞—Ä—è–¥–∫–∞', '–≠–∫–æ–ª–æ–≥–∏—á–Ω—ã–π'],
    status: VehicleStatus.AVAILABLE
  },
  {
    type: VehicleType.PREMIUM,
    name: 'Hongqi EHS9',
    brand: 'Hongqi',
    model: 'EHS9',
    license_plate: '01 B 456 CD',
    capacity: 3,
    price_per_km: 3000,
    description: '–ü—Ä–µ–º–∏—É–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –∫–ª–∞—Å—Å–∞ –ª—é–∫—Å –¥–ª—è VIP –ø–æ–µ–∑–¥–æ–∫',
    features: ['–ö–æ–∂–∞–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è', '–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞', '–ü—Ä–µ–º–∏—É–º –∞—É–¥–∏–æ', 'Wi-Fi', '–≠–∫–æ–ª–æ–≥–∏—á–Ω—ã–π'],
    status: VehicleStatus.AVAILABLE
  },
  {
    type: VehicleType.MINIVAN,
    name: 'Kia Carnival',
    brand: 'Kia',
    model: 'Carnival',
    license_plate: '01 C 789 EF',
    capacity: 5,
    price_per_km: 2000,
    description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –º–∏–Ω–∏–≤—ç–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã –¥–æ 5 —á–µ–ª–æ–≤–µ–∫',
    features: ['–ö–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å', 'USB –∑–∞—Ä—è–¥–∫–∞', '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Å–∞–ª–æ–Ω'],
    status: VehicleStatus.BUSY
  },
  {
    type: VehicleType.MICROBUS,
    name: 'Mercedes Sprinter',
    brand: 'Mercedes',
    model: 'Sprinter',
    license_plate: '01 D 111 GH',
    capacity: 16,
    price_per_km: 2500,
    description: '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø –¥–æ 16 —á–µ–ª–æ–≤–µ–∫',
    features: ['–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–ë–æ–ª—å—à–æ–π –±–∞–≥–∞–∂–Ω–∏–∫', '–£–¥–æ–±–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è'],
    status: VehicleStatus.AVAILABLE
  },
  {
    type: VehicleType.BUS,
    name: 'Higer Bus',
    brand: 'Higer',
    model: 'Bus',
    license_plate: '01 E 222 IJ',
    capacity: 30,
    price_per_km: 3000,
    description: '–ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–±—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø –¥–æ 30 —á–µ–ª–æ–≤–µ–∫',
    features: ['–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–£–¥–æ–±–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è', '–ë–æ–ª—å—à–æ–π –±–∞–≥–∞–∂–Ω–∏–∫', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω'],
    status: VehicleStatus.AVAILABLE
  },
  {
    type: VehicleType.SEDAN,
    name: 'Toyota Camry',
    brand: 'Toyota',
    model: 'Camry',
    license_plate: '01 F 333 KL',
    capacity: 3,
    price_per_km: 1800,
    description: '–ù–∞–¥–µ–∂–Ω—ã–π —Å–µ–¥–∞–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫',
    features: ['–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', 'USB –∑–∞—Ä—è–¥–∫–∞', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å'],
    status: VehicleStatus.MAINTENANCE
  }
]

const driversData = [
  {
    name: '–ò–±—Ä–∞–≥–∏–º –ê–∑–∏–∑–æ–≤',
    phone: '+998 90 123 45 67',
    license: 'AB1234567'
  },
  {
    name: '–ê–∑–∏–∑ –†–∞—Ö–∏–º–æ–≤',
    phone: '+998 91 234 56 78',
    license: 'CD2345678'
  },
  {
    name: '–°–∞–∏–¥ –ö–∞—Ä–∏–º–æ–≤',
    phone: '+998 93 345 67 89',
    license: 'EF3456789'
  },
  {
    name: '–§–∞—Ä—Ö–æ–¥ –£—Å–º–∞–Ω–æ–≤',
    phone: '+998 94 456 78 90',
    license: 'GH4567890'
  }
]

export async function seedVehicles() {
  console.log('üöó –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏...')

  try {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.driver.deleteMany()
    await prisma.vehicle.deleteMany()

    // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    const createdVehicles = []
    for (const vehicleData of vehiclesData) {
      const vehicle = await prisma.vehicle.create({
        data: vehicleData
      })
      createdVehicles.push(vehicle)
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ${vehicle.brand} ${vehicle.model} (${vehicle.license_plate})`)
    }

    // –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const createdDrivers = []
    for (let i = 0; i < driversData.length; i++) {
      const driverData = driversData[i]
      const vehicle = createdVehicles[i] // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–∂–¥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é –∞–≤—Ç–æ–º–æ–±–∏–ª—å

      const driver = await prisma.driver.create({
        data: {
          ...driverData,
          vehicle_id: vehicle?.id
        }
      })
      createdDrivers.push(driver)
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: ${driver.name} ‚Üí ${vehicle?.brand} ${vehicle?.model}`)
    }

    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${createdVehicles.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ ${createdDrivers.length} –≤–æ–¥–∏—Ç–µ–ª–µ–π`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–º–∏:', error)
    throw error
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedVehicles()
    .then(() => {
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}
