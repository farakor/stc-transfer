/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—é
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node backend/test-driver-notification.js <telegram_id> <booking_id>
 *
 * –ü—Ä–∏–º–µ—Ä:
 * node backend/test-driver-notification.js 123456789 clm123abc456
 */

require("dotenv").config();
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function testDriverNotification() {
  const telegramId = process.argv[2];
  const bookingId = process.argv[3];

  if (!telegramId) {
    console.error("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ telegram_id –≤–æ–¥–∏—Ç–µ–ª—è");
    console.log(
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node backend/test-driver-notification.js <telegram_id> [booking_id]"
    );
    process.exit(1);
  }

  try {
    console.log("üîç –ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è —Å telegram_id:", telegramId);

    // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
    const driver = await prisma.driver.findFirst({
      where: { telegram_id: telegramId },
      include: { vehicle: true },
    });

    if (!driver) {
      console.error("‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å telegram_id", telegramId, "–Ω–µ –Ω–∞–π–¥–µ–Ω");
      console.log("\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ —Å telegram_id:");

      const driversWithTelegram = await prisma.driver.findMany({
        where: {
          telegram_id: { not: null },
        },
        select: {
          id: true,
          name: true,
          telegram_id: true,
          phone: true,
        },
      });

      if (driversWithTelegram.length > 0) {
        driversWithTelegram.forEach((d) => {
          console.log(
            `  - ${d.name} (ID: ${d.id}, Telegram: ${d.telegram_id}, –¢–µ–ª: ${d.phone})`
          );
        });
      } else {
        console.log("  –ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Telegram");
      }

      process.exit(1);
    }

    console.log("‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", driver.name);

    let booking;

    if (bookingId) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      console.log("üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞:", bookingId);
      booking = await prisma.booking.findUnique({
        where: { id: bookingId },
        include: { user: true, vehicle: true, driver: true },
      });

      if (!booking) {
        console.error("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        process.exit(1);
      }
    } else {
      // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
      console.log("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª—è...");

      const activeBooking = await prisma.booking.findFirst({
        where: {
          driver_id: driver.id,
          status: { in: ["VEHICLE_ASSIGNED", "CONFIRMED", "IN_PROGRESS"] },
        },
        include: { user: true, vehicle: true, driver: true },
      });

      if (activeBooking) {
        booking = activeBooking;
        console.log(
          "‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑:",
          booking.booking_number || booking.id
        );
      } else {
        console.log("‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        console.log("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...");

        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let testUser = await prisma.user.findFirst({
          where: {
            OR: [{ telegram_id: "123456789" }, { phone: { contains: "test" } }],
          },
        });

        if (!testUser) {
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          testUser = await prisma.user.create({
            data: {
              telegram_id: "123456789",
              first_name: "–¢–µ—Å—Ç–æ–≤—ã–π",
              last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
              phone: "+998901234567",
              language_code: "ru",
            },
          });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        const bookingCount = await prisma.booking.count();
        const bookingNumber = `–°–¢–¢-${String(bookingCount + 1).padStart(
          5,
          "0"
        )}`;

        booking = await prisma.booking.create({
          data: {
            booking_number: bookingNumber,
            from_location: "–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            to_location: "–°–∞–º–∞—Ä–∫–∞–Ω–¥, —Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞",
            pickup_location: "—É–ª. –ê–º–∏—Ä–∞ –¢–∏–º—É—Ä–∞, 12",
            dropoff_location: "–ø–ª–æ—â–∞–¥—å –†–µ–≥–∏—Å—Ç–∞–Ω",
            vehicle_type: "SEDAN",
            passenger_count: 3,
            price: 250000,
            total_price: 250000,
            distance_km: 270,
            status: "VEHICLE_ASSIGNED",
            user_id: testUser.id,
            driver_id: driver.id,
            vehicle_id: driver.vehicle_id,
            notes: "–° –¥–µ—Ç—Å–∫–∏–º –∫—Ä–µ—Å–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
            pickup_time: new Date(Date.now() + 2 * 60 * 60 * 1000), // –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞
          },
          include: { user: true, vehicle: true, driver: true },
        });

        console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:", booking.booking_number);
      }
    }

    console.log("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é...");
    console.log("–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:");
    console.log("  –ù–æ–º–µ—Ä:", booking.booking_number || booking.id);
    console.log("  –ú–∞—Ä—à—Ä—É—Ç:", booking.from_location, "‚Üí", booking.to_location);
    console.log("  –ü–∞—Å—Å–∞–∂–∏—Ä:", booking.user.name || booking.user.first_name);
    console.log("  –¢–µ–ª–µ—Ñ–æ–Ω:", booking.user.phone);
    console.log("  –°—Ç–æ–∏–º–æ—Å—Ç—å:", booking.price, "—Å—É–º");
    console.log("  –°—Ç–∞—Ç—É—Å:", booking.status);

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
    const {
      DriverTelegramBotService,
    } = require("./dist/services/driverTelegramBot");

    const driverBot = DriverTelegramBotService.getInstance();

    if (!driverBot.isDriverBotEnabled()) {
      console.error("\n‚ùå –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω!");
      console.log("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
      console.log(
        "  TELEGRAM_DRIVER_BOT_TOKEN =",
        process.env.TELEGRAM_DRIVER_BOT_TOKEN
          ? "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
          : "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
      );
      console.log(
        "  TELEGRAM_DRIVER_WEBHOOK_URL =",
        process.env.TELEGRAM_DRIVER_WEBHOOK_URL || "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
      );
      process.exit(1);
    }

    await driverBot.sendNewOrderNotification(telegramId, booking);

    console.log("\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
    console.log("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –±–æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è");
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞:", error.message);
    console.error(error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

testDriverNotification();
