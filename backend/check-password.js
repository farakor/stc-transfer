const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcryptjs");

const prisma = new PrismaClient();

async function checkPassword() {
  try {
    const email = process.argv[2];
    const password = process.argv[3];

    if (!email || !password) {
      console.log(
        "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node check-password.js <email> <password>"
      );
      process.exit(1);
    }

    // –ò—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admin = await prisma.admin.findUnique({
      where: { email: email.toLowerCase() },
    });

    if (!admin) {
      console.log(`‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }

    console.log("üìß Email:", admin.email);
    console.log("üë§ –ò–º—è:", `${admin.first_name} ${admin.last_name}`);
    console.log("üé≠ –†–æ–ª—å:", admin.role);
    console.log("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω:", admin.is_active ? "–î–∞" : "–ù–µ—Ç");
    console.log("");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValid = await bcrypt.compare(password, admin.password);

    if (isValid) {
      console.log("‚úÖ –ü–∞—Ä–æ–ª—å –ü–†–ê–í–ò–õ–¨–ù–´–ô!");
      console.log("");
      console.log("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:");
      console.log(`Email: ${admin.email}`);
      console.log(`–ü–∞—Ä–æ–ª—å: ${password}`);
    } else {
      console.log("‚ùå –ü–∞—Ä–æ–ª—å –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô!");
      console.log("");
      console.log("–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
      console.log(`node reset-password.js ${admin.email} <–Ω–æ–≤—ã–π_–ø–∞—Ä–æ–ª—å>`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

checkPassword();
