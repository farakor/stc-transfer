const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcryptjs");

const prisma = new PrismaClient();

async function resetPassword() {
  try {
    const email = process.argv[2];
    const newPassword = process.argv[3];

    if (!email || !newPassword) {
      console.log(
        "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node reset-password.js <email> <–Ω–æ–≤—ã–π_–ø–∞—Ä–æ–ª—å>"
      );
      process.exit(1);
    }

    if (newPassword.length < 6) {
      console.log("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
      process.exit(1);
    }

    // –ò—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admin = await prisma.admin.findUnique({
      where: { email: email.toLowerCase() },
    });

    if (!admin) {
      console.log(`‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await prisma.admin.update({
      where: { id: admin.id },
      data: { password: hashedPassword },
    });

    console.log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    console.log("");
    console.log("üìß Email:", admin.email);
    console.log("üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", newPassword);
    console.log("üë§ –ò–º—è:", `${admin.first_name} ${admin.last_name}`);
    console.log("üé≠ –†–æ–ª—å:", admin.role);
    console.log("");
    console.log("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º:");
    console.log("http://localhost:3001/admin/login");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

resetPassword();
