const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...\n');

  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalBookings = await prisma.booking.count();
    const totalDrivers = await prisma.driver.count();
    const totalUsers = await prisma.user.count();
    const totalVehicles = await prisma.vehicle.count();

    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalBookings}`);
    console.log(`   –í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${totalDrivers}`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`   –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${totalVehicles}`);
    console.log('');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const bookingsByStatus = await prisma.booking.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });

    console.log('üìä –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    bookingsByStatus.forEach(stat => {
      console.log(`   ${stat.status}: ${stat._count.status}`);
    });
    console.log('');

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    const recentBookings = await prisma.booking.findMany({
      take: 5,
      orderBy: {
        created_at: 'desc'
      },
      select: {
        id: true,
        booking_number: true,
        status: true,
        from_location: true,
        to_location: true,
        total_price: true,
        created_at: true
      }
    });

    console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:');
    recentBookings.forEach(booking => {
      console.log(`   ${booking.booking_number}: ${booking.from_location} ‚Üí ${booking.to_location}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${booking.status}, –¶–µ–Ω–∞: ${booking.total_price}, –î–∞—Ç–∞: ${booking.created_at}`);
    });
    console.log('');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const driversStatus = await prisma.driver.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });

    console.log('üìä –í–æ–¥–∏—Ç–µ–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    driversStatus.forEach(stat => {
      console.log(`   ${stat.status}: ${stat._count.status}`);
    });
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date(new Date().setHours(0, 0, 0, 0));
    const todayBookings = await prisma.booking.count({
      where: {
        created_at: {
          gte: today
        }
      }
    });

    console.log(`üìä –ó–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayBookings}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    const weekBookings = await prisma.booking.count({
      where: {
        created_at: {
          gte: weekAgo
        }
      }
    });

    console.log(`üìä –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: ${weekBookings}`);
    console.log('');

    if (totalBookings === 0) {
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤!');
      console.log('   –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.');
    } else {
      console.log('‚úÖ –í –±–∞–∑–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkData();

