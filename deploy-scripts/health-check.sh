#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è STC Transfer

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚Ñπ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

DOMAIN="srs.faruk.io"
ERRORS=0

echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è STC Transfer..."
echo "=================================="
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ PM2..."
if pm2 describe stc-backend > /dev/null 2>&1; then
    STATUS=$(pm2 jlist | grep -o '"status":"[^"]*"' | head -1 | cut -d'"' -f4)
    if [ "$STATUS" = "online" ]; then
        print_success "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç (status: $STATUS)"
    else
        print_error "Backend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (status: $STATUS)"
        ((ERRORS++))
    fi
else
    print_error "Backend –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PM2"
    ((ERRORS++))
fi
echo ""

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx..."
if sudo systemctl is-active --quiet nginx; then
    print_success "Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "Nginx –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    ((ERRORS++))
fi
echo ""

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
if sudo systemctl is-active --quiet postgresql; then
    print_success "PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    ((ERRORS++))
fi
echo ""

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API Health Endpoint
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ API Health Endpoint..."
API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN/api/health)
if [ "$API_RESPONSE" = "200" ]; then
    print_success "API –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $API_RESPONSE)"
else
    print_error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $API_RESPONSE)"
    ((ERRORS++))
fi
echo ""

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS..."
HTTPS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN)
if [ "$HTTPS_RESPONSE" = "200" ]; then
    print_success "HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $HTTPS_RESPONSE)"
else
    print_warning "HTTPS –≤–µ—Ä–Ω—É–ª –∫–æ–¥: $HTTPS_RESPONSE"
fi
echo ""

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
SSL_EXPIRY=$(echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -dates | grep "notAfter" | cut -d= -f2)
if [ -n "$SSL_EXPIRY" ]; then
    print_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω –¥–æ: $SSL_EXPIRY"
else
    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    ((ERRORS++))
fi
echo ""

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 80 ]; then
    print_success "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $DISK_USAGE%"
elif [ "$DISK_USAGE" -lt 90 ]; then
    print_warning "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $DISK_USAGE% (–ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É)"
else
    print_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $DISK_USAGE% (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)"
    ((ERRORS++))
fi
echo ""

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏..."
MEMORY_USAGE=$(free | awk 'NR==2 {printf "%.0f", $3/$2 * 100}')
if [ "$MEMORY_USAGE" -lt 80 ]; then
    print_success "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $MEMORY_USAGE%"
elif [ "$MEMORY_USAGE" -lt 90 ]; then
    print_warning "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $MEMORY_USAGE% (–≤—ã—Å–æ–∫–æ–µ)"
else
    print_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $MEMORY_USAGE% (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)"
fi
echo ""

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
if sudo netstat -tulpn | grep -q ":3001.*LISTEN"; then
    print_success "Backend —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 3001"
else
    print_error "Backend –Ω–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 3001"
    ((ERRORS++))
fi

if sudo netstat -tulpn | grep -q ":443.*LISTEN"; then
    print_success "Nginx —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 443 (HTTPS)"
else
    print_error "Nginx –Ω–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 443"
    ((ERRORS++))
fi
echo ""

# 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫)
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏..."
RECENT_ERRORS=$(pm2 logs stc-backend --lines 100 --nostream 2>/dev/null | grep -i "error\|fatal\|critical" | wc -l)
if [ "$RECENT_ERRORS" -eq 0 ]; then
    print_success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
elif [ "$RECENT_ERRORS" -lt 5 ]; then
    print_warning "–ù–∞–π–¥–µ–Ω–æ $RECENT_ERRORS –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
else
    print_error "–ù–∞–π–¥–µ–Ω–æ $RECENT_ERRORS –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ: pm2 logs)"
fi
echo ""

# 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π..."
BACKUP_DIR="$HOME/backups/postgres"
if [ -d "$BACKUP_DIR" ]; then
    LAST_BACKUP=$(find $BACKUP_DIR -name "backup_*.sql.gz" -type f -mtime -2 | wc -l)
    if [ "$LAST_BACKUP" -gt 0 ]; then
        LAST_BACKUP_FILE=$(ls -t $BACKUP_DIR/backup_*.sql.gz 2>/dev/null | head -1)
        LAST_BACKUP_DATE=$(stat -c %y "$LAST_BACKUP_FILE" 2>/dev/null | cut -d' ' -f1)
        print_success "–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $LAST_BACKUP_DATE"
    else
        print_warning "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π)"
    fi
else
    print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi
echo ""

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo "=================================="
echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:"
echo ""

# CPU Load
LOAD=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}')
echo "CPU Load: $LOAD"

# Memory
MEM_TOTAL=$(free -h | awk 'NR==2 {print $2}')
MEM_USED=$(free -h | awk 'NR==2 {print $3}')
echo "Memory: $MEM_USED / $MEM_TOTAL"

# Disk
DISK_TOTAL=$(df -h / | awk 'NR==2 {print $2}')
DISK_USED=$(df -h / | awk 'NR==2 {print $3}')
echo "Disk: $DISK_USED / $DISK_TOTAL"

# Uptime
UPTIME=$(uptime -p)
echo "Uptime: $UPTIME"

echo ""
echo "=================================="

# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ $ERRORS -eq 0 ]; then
    echo ""
    print_success "üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    exit 0
else
    echo ""
    print_error "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $ERRORS –ø—Ä–æ–±–ª–µ–º(—ã)"
    echo ""
    echo "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "  pm2 logs stc-backend --lines 100"
    echo "  sudo tail -f /var/log/nginx/stc-error.log"
    echo "  sudo systemctl status nginx"
    echo "  sudo systemctl status postgresql"
    echo ""
    exit 1
fi

