import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import L from 'leaflet';
import { Navigation, RefreshCw, AlertCircle, MapPin, Activity, Clock } from 'lucide-react';
import { wialonJsonpService } from '../services/wialonJsonpService';
import { wialonConfig, vehicleMarkerStyles } from '../config/wialon.config';
import 'leaflet/dist/leaflet.css';

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
const markerStyles = `
  .custom-vehicle-marker {
    background: transparent !important;
    border: none !important;
  }
  
  .custom-vehicle-marker:hover {
    z-index: 1000 !important;
  }
  
  .vehicle-marker-tooltip {
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.2s;
  }
  
  .custom-vehicle-marker:hover .vehicle-marker-tooltip {
    opacity: 1;
  }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
if (typeof document !== 'undefined' && !document.getElementById('vehicle-tracker-styles')) {
  const styleSheet = document.createElement('style');
  styleSheet.id = 'vehicle-tracker-styles';
  styleSheet.textContent = markerStyles;
  document.head.appendChild(styleSheet);
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Leaflet
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

interface WialonUnit {
  id: string;
  name: string;
  position?: {
    lat: number;
    lng: number;
    speed?: number;
    course?: number;
    time?: number;
  };
  status?: 'online' | 'offline' | 'moving' | 'stopped';
}

interface VehicleTrackerProps {
  wialonUnitId: string;
  vehicleName?: string;
  autoRefresh?: boolean;
  refreshInterval?: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
const MapCenter: React.FC<{ center: [number, number] }> = ({ center }) => {
  const map = useMap();
  useEffect(() => {
    map.setView(center, map.getZoom());
  }, [center, map]);
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∫—É—Ä—Å—É
const getDirectionText = (course: number): string => {
  if (course >= 337.5 || course < 22.5) return '‚¨ÜÔ∏è –°–µ–≤–µ—Ä';
  if (course >= 22.5 && course < 67.5) return '‚ÜóÔ∏è –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫';
  if (course >= 67.5 && course < 112.5) return '‚û°Ô∏è –í–æ—Å—Ç–æ–∫';
  if (course >= 112.5 && course < 157.5) return '‚ÜòÔ∏è –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫';
  if (course >= 157.5 && course < 202.5) return '‚¨áÔ∏è –Æ–≥';
  if (course >= 202.5 && course < 247.5) return '‚ÜôÔ∏è –Æ–≥–æ-–∑–∞–ø–∞–¥';
  if (course >= 247.5 && course < 292.5) return '‚¨ÖÔ∏è –ó–∞–ø–∞–¥';
  if (course >= 292.5 && course < 337.5) return '‚ÜñÔ∏è –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥';
  return '‚¨ÜÔ∏è';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SVG –∏–∫–æ–Ω–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
const getVehicleSvg = (name: string) => {
  const nameUpper = name.toUpperCase();
  
  // –ê–≤—Ç–æ–±—É—Å—ã
  if (nameUpper.includes('–ê–í–¢–û–ë–£–°') || 
      nameUpper.includes('HIGER') || 
      nameUpper.includes('BUS') ||
      nameUpper.includes('–õ–ö–ê')) {
    return '/bus.svg';
  }
  
  // –õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
  if (nameUpper.includes('–õ–ï–ì–ö–û–í–û–ô') || 
      nameUpper.includes('HONGQI') ||
      nameUpper.includes('SEDAN') ||
      nameUpper.includes('–ö–ò–ê') ||
      nameUpper.includes('KIA') ||
      nameUpper.includes('CARNIVAL')) {
    return '/sedan.svg';
  }
  
  // –ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å—ã
  if (nameUpper.includes('–ú–ò–ö–†–û–ê–í–¢–û–ë–£–°') || 
      nameUpper.includes('SPRINTER') ||
      nameUpper.includes('MERCEDES') ||
      nameUpper.includes('MERSEDES') ||
      nameUpper.includes('MINIVAN')) {
    return '/minivan.svg';
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–¥–∞–Ω (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∞—à–∏–Ω)
  return '/sedan.svg';
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–∫–æ–Ω–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
const createVehicleIcon = (vehicle: WialonUnit) => {
  const status = vehicle.status || 'offline';
  const style = vehicleMarkerStyles[status] || vehicleMarkerStyles.offline;
  const vehicleSvgPath = getVehicleSvg(vehicle.name);
  const speed = Math.round(vehicle.position?.speed || 0);
  const course = vehicle.position?.course || 0;
  
  return L.divIcon({
    html: `
      <div style="
        position: relative;
        width: 56px;
        height: 66px;
        display: flex;
        flex-direction: column;
        align-items: center;
        cursor: pointer;
      ">
        <!-- Tooltip —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º -->
        <div class="vehicle-marker-tooltip">
          ${vehicle.name}
          ${course > 0 ? `<br>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${getDirectionText(course)} (${course}¬∞)` : ''}
          ${speed > 0 ? `<br>–°–∫–æ—Ä–æ—Å—Ç—å: ${speed} –∫–º/—á` : ''}
        </div>
        
        <!-- SVG –∏–∫–æ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –ø–æ –∫—É—Ä—Å—É -->
        <div style="
          width: 56px;
          height: 56px;
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative;
          transition: transform 0.2s ease;
          filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
        ">
          <img src="${vehicleSvgPath}" 
               style="
                 width: 56px; 
                 height: 56px; 
                 object-fit: contain;
                 transform: rotate(${course}deg);
                 transition: transform 0.3s ease;
                 ${status === 'moving' ? 'filter: hue-rotate(120deg) saturate(1.2);' : ''}
                 ${status === 'stopped' ? 'filter: hue-rotate(60deg) saturate(1.1);' : ''}
                 ${status === 'offline' ? 'filter: grayscale(1) brightness(0.7);' : ''}
               " 
               alt="vehicle" />
        </div>
        
        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ -->
        ${status === 'moving' && speed > 0 ? `
          <div style="
            background: rgba(34, 197, 94, 0.9);
            color: white;
            font-size: 9px;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 8px;
            margin-top: 2px;
            min-width: 20px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
          ">
            ${speed}
          </div>
        ` : ''}
      </div>
    `,
    className: 'custom-vehicle-marker',
    iconSize: [56, 66],
    iconAnchor: [28, 60]
  });
};

const VehicleTracker: React.FC<VehicleTrackerProps> = ({
  wialonUnitId,
  vehicleName,
  autoRefresh = true,
  refreshInterval = 30
}) => {
  const [unit, setUnit] = useState<WialonUnit | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const loadVehiclePosition = async () => {
    setLoading(true);
    setError(null);
    try {
      console.log(`üöó Loading position for unit ${wialonUnitId} via JSONP...`);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JSONP —Å–µ—Ä–≤–∏—Å
      wialonJsonpService.initialize(wialonConfig);
      
      // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
      if (!wialonJsonpService.isAuthenticated()) {
        console.log('üîê Logging in to Wialon...');
        await wialonJsonpService.login();
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ units —á–µ—Ä–µ–∑ JSONP
      const vehicles = await wialonJsonpService.getVehicles();
      
      // –ò—â–µ–º –Ω—É–∂–Ω—ã–π unit
      const vehicle = vehicles.find((v: any) => v.id.toString() === wialonUnitId);
      
      if (vehicle) {
        const pos = vehicle.pos;
        const now = Math.floor(Date.now() / 1000);
        
        let status: 'online' | 'offline' | 'moving' | 'stopped' = 'offline';
        
        if (pos && (now - pos.t) < 600) {
          const speed = pos.s || 0;
          status = speed > 5 ? 'moving' : 'stopped';
        }
        
        const unitData: WialonUnit = {
          id: vehicle.id.toString(),
          name: vehicle.nm || `Unit ${vehicle.id}`,
          position: pos ? {
            lat: pos.y,
            lng: pos.x,
            speed: pos.s || 0,
            course: pos.c || 0,
            time: pos.t || 0
          } : undefined,
          status
        };
        
        setUnit(unitData);
        setLastUpdate(new Date());
        console.log('‚úÖ Position loaded successfully');
      } else {
        setError('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ Wialon');
        console.error(`Unit ${wialonUnitId} not found in Wialon`);
      }
    } catch (err: any) {
      console.error('Failed to load vehicle position:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadVehiclePosition();

    if (autoRefresh) {
      intervalRef.current = setInterval(loadVehiclePosition, refreshInterval * 1000);
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [wialonUnitId, autoRefresh, refreshInterval]);

  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'moving':
        return 'text-green-600 bg-green-100';
      case 'stopped':
        return 'text-yellow-600 bg-yellow-100';
      case 'offline':
        return 'text-gray-600 bg-gray-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusText = (status?: string) => {
    switch (status) {
      case 'moving':
        return '–í –¥–≤–∏–∂–µ–Ω–∏–∏';
      case 'stopped':
        return '–û—Å—Ç–∞–Ω–æ–≤–∫–∞';
      case 'offline':
        return '–û—Ñ—Ñ–ª–∞–π–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const formatLastUpdateTime = (timestamp?: number) => {
    if (!timestamp) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    const date = new Date(timestamp * 1000);
    const now = new Date();
    const diffMinutes = Math.floor((now.getTime() - date.getTime()) / 1000 / 60);
    
    if (diffMinutes < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    const diffHours = Math.floor(diffMinutes / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    return date.toLocaleString('ru-RU');
  };

  if (loading && !unit) {
    return (
      <div className="flex items-center justify-center p-12 bg-gray-50 rounded-lg">
        <div className="text-center">
          <RefreshCw className="animate-spin mx-auto mb-4 text-gray-400" size={48} />
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ...</p>
        </div>
      </div>
    );
  }

  if (error || !unit?.position) {
    return (
      <div className="p-8 bg-red-50 rounded-lg">
        <div className="flex items-center gap-3 mb-4">
          <AlertCircle className="text-red-600" size={32} />
          <div>
            <h3 className="text-lg font-semibold text-red-900">–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
            <p className="text-red-700">
              {error || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'}
            </p>
          </div>
        </div>
        <button
          onClick={loadVehiclePosition}
          className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
        >
          <RefreshCw size={18} />
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  const { position } = unit;
  const center: [number, number] = [position.lat, position.lng];

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden border" style={{ height: '250px', width: '100%' }}>
      <MapContainer
        center={center}
        zoom={15}
        style={{ height: '100%', width: '100%' }}
        zoomControl={true}
      >
        {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—ã 2GIS –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –†–æ—Å—Å–∏–∏ –∏ –°–ù–ì */}
        <TileLayer
          attribution='&copy; <a href="https://2gis.ru/">2GIS</a>'
          url="https://tile{s}.maps.2gis.com/tiles?x={x}&y={y}&z={z}&v=1"
          subdomains={['0', '1', '2', '3']}
          maxZoom={18}
        />
        <MapCenter center={center} />
        <Marker position={center} icon={createVehicleIcon(unit)}>
          <Popup>
            <div className="p-2">
              <h3 className="font-bold text-lg mb-2">{vehicleName || unit.name}</h3>
              
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span>–°—Ç–∞—Ç—É—Å:</span>
                  <span className={`font-medium ${
                    unit.status === 'moving' ? 'text-green-600' :
                    unit.status === 'stopped' ? 'text-yellow-600' :
                    'text-red-600'
                  }`}>
                    {getStatusText(unit.status)}
                  </span>
                </div>
                
                <div className="flex justify-between">
                  <span>–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                  <span>{Math.round(position.speed || 0)} –∫–º/—á</span>
                </div>
                
                {position.course !== undefined && position.course > 0 && (
                  <div className="flex justify-between">
                    <span>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</span>
                    <span>{getDirectionText(position.course)} ({position.course}¬∞)</span>
                  </div>
                )}
                
                <div className="flex justify-between">
                  <span>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</span>
                  <span className="font-mono text-xs">{position.lat.toFixed(6)}, {position.lng.toFixed(6)}</span>
                </div>
                
                <div className="flex justify-between">
                  <span>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                  <span>{formatLastUpdateTime(position.time)}</span>
                </div>
              </div>
            </div>
          </Popup>
        </Marker>
      </MapContainer>
    </div>
  );
};

export default VehicleTracker;

