/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wialon API —á–µ—Ä–µ–∑ JSONP
 * –û–±—Ö–æ–¥–∏—Ç CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ gps.ent-en.com
 */

export interface WialonConfig {
  baseUrl: string;
  token?: string;
  username?: string;
  password?: string;
}

export interface VehiclePosition {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  speed: number;
  course: number;
  timestamp: number;
  status: 'online' | 'offline' | 'moving' | 'stopped';
  driver?: string;
  fuel?: number;
  mileage?: number;
}

export interface WialonSession {
  sid: string;
  userId: number;
  userName: string;
}

class WialonJsonpService {
  private config: WialonConfig | null = null;
  private session: WialonSession | null = null;
  private baseApiUrl = '';
  private callbackCounter = 0;
  private httpFallbackAttempted = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Wialon
   */
  initialize(config: WialonConfig) {
    this.config = config;
    this.httpFallbackAttempted = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    // –î–ª—è JSONP –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ /ajax.html
    if (config.baseUrl.includes('/wialon/ajax.html')) {
      this.baseApiUrl = config.baseUrl;
    } else {
      this.baseApiUrl = `${config.baseUrl}/ajax.html`;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ callback —Ñ—É–Ω–∫—Ü–∏–∏
   */
  private createCallbackName(): string {
    this.callbackCounter++;
    return `wialonCallback_${Date.now()}_${this.callbackCounter}`;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JSONP –∑–∞–ø—Ä–æ—Å–∞ –∫ Wialon API
   */
  private makeJsonpRequest(service: string, params: any, sid?: string): Promise<any> {
    return new Promise((resolve, reject) => {
      const callbackName = this.createCallbackName();
      let timeoutId: NodeJS.Timeout;
      
      // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é callback —Ñ—É–Ω–∫—Ü–∏—é
      (window as any)[callbackName] = (data: any) => {
        clearTimeout(timeoutId);
        try {
          if (data.error) {
            reject(new Error(`Wialon API Error: ${data.error}`));
          } else {
            resolve(data);
          }
        } catch (error) {
          reject(error);
        } finally {
          // –û—á–∏—â–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏—é –∏ script —Ç–µ–≥
          delete (window as any)[callbackName];
          const script = document.getElementById(`jsonp-${callbackName}`);
          if (script) {
            script.remove();
          }
        }
      };

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è JSONP –∑–∞–ø—Ä–æ—Å–∞
      let url = `${this.baseApiUrl}?svc=${service}`;
      if (sid) {
        url += `&sid=${sid}`;
      }
      url += `&params=${encodeURIComponent(JSON.stringify(params))}`;
      url += `&callback=${callbackName}`;

      // –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üåê JSONP request URL:', url);

      // –°–æ–∑–¥–∞–µ–º script —Ç–µ–≥ –¥–ª—è JSONP –∑–∞–ø—Ä–æ—Å–∞
      const script = document.createElement('script');
      script.id = `jsonp-${callbackName}`;
      script.src = url;
      script.async = true;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
      script.onerror = (error) => {
        clearTimeout(timeoutId);
        delete (window as any)[callbackName];
        console.error('‚ùå JSONP script load error:', error);
        console.error('Failed URL:', url);
        
        // –ü—Ä–æ–±—É–µ–º HTTP –µ—Å–ª–∏ HTTPS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        if (url.startsWith('https://') && !this.httpFallbackAttempted) {
          console.log('üîÑ Trying HTTP fallback...');
          this.httpFallbackAttempted = true;
          this.baseApiUrl = this.baseApiUrl.replace('https://', 'http://');
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å HTTP
          this.makeJsonpRequest(service, params, sid).then(resolve).catch(reject);
        } else {
          reject(new Error('JSONP request failed to load. Server may be unreachable or blocked by CORS.'));
        }
      };

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è JSONP –∑–∞–ø—Ä–æ—Å–∞
      timeoutId = setTimeout(() => {
        if ((window as any)[callbackName]) {
          delete (window as any)[callbackName];
          if (script) script.remove();
          console.error('‚è±Ô∏è JSONP request timeout after 15s');
          reject(new Error('JSONP request timeout'));
        }
      }, 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

      document.head.appendChild(script);
    });
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Wialon
   */
  async login(): Promise<WialonSession> {
    if (!this.config) {
      throw new Error('Wialon JSONP service not initialized. Call initialize() first.');
    }

    try {
      let response: any;
      
      if (this.config.token) {
        response = await this.makeJsonpRequest('token/login', { token: this.config.token });
      } else if (this.config.username && this.config.password) {
        response = await this.makeJsonpRequest('core/login', {
          user: this.config.username,
          password: this.config.password,
        });
      } else {
        throw new Error('No Wialon token or login/password provided in config for JSONP service.');
      }

      this.session = {
        sid: response.eid,
        userId: response.user?.id || 0,
        userName: response.user?.nm || 'Unknown',
      };

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const tzOffset = new Date().getTimezoneOffset() * -60; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
      await this.makeJsonpRequest('render/set_locale', { tzOffset, language: 'ru' }, this.session.sid);

      return this.session;
    } catch (error: any) {
      console.error('Error during Wialon JSONP login:', error);
      throw new Error(`Wialon JSONP login failed: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
   */
  async getVehicles(): Promise<any[]> {
    if (!this.session) {
      throw new Error('Not authenticated. Call login() first.');
    }

    try {
      const response = await this.makeJsonpRequest('core/search_items', {
        spec: {
          itemsType: 'avl_unit',
          propName: 'sys_name',
          propValueMask: '*',
          sortType: 'sys_name'
        },
        force: 1,
        flags: 1025, // 0x1 + 0x400 (–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ + –ø–æ–∑–∏—Ü–∏–∏)
        from: 0,
        to: 0
      }, this.session.sid);

      return response.items || [];
    } catch (error: any) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 4 (Invalid session), –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
      if (error.message.includes('Wialon API Error: 4')) {
        console.log('Session expired while getting vehicles, attempting to re-login...');
        try {
          await this.login();
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
          const retryResponse = await this.makeJsonpRequest('core/search_items', {
            spec: {
              itemsType: 'avl_unit',
              propName: 'sys_name',
              propValueMask: '*',
              sortType: 'sys_name'
            },
            force: 1,
            flags: 1025, // 0x1 + 0x400 (–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ + –ø–æ–∑–∏—Ü–∏–∏)
            from: 0,
            to: 0
          }, this.session!.sid);
          
          return retryResponse.items || [];
        } catch (retryError: any) {
          console.error('Error after re-login while getting vehicles:', retryError);
          throw new Error(`Failed to get vehicles after re-login: ${retryError.message}`);
        }
      } else {
        console.error('Error getting vehicles via JSONP:', error);
        throw new Error(`Failed to get vehicles: ${error.message}`);
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
   */
  async updateVehicleData(vehicleIds: number[]): Promise<void> {
    if (!this.session) {
      throw new Error('Not authenticated. Call login() first.');
    }

    if (vehicleIds.length === 0) {
      return;
    }

    try {
      await this.makeJsonpRequest('core/update_data_flags', {
        spec: vehicleIds.map(id => ({
          type: 'id',
          data: id,
          flags: 3 // 1 + 2 = –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ + –ø–æ–∑–∏—Ü–∏–∏
        }))
      }, this.session.sid);
    } catch (error: any) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 4 (Invalid session), –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
      if (error.message.includes('Wialon API Error: 4')) {
        console.log('Session expired, attempting to re-login...');
        try {
          await this.login();
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
          await this.makeJsonpRequest('core/update_data_flags', {
            spec: vehicleIds.map(id => ({
              type: 'id',
              data: id,
              flags: 3
            }))
          }, this.session!.sid);
        } catch (retryError: any) {
          console.error('Error after re-login:', retryError);
          throw new Error(`Failed to update vehicle data after re-login: ${retryError.message}`);
        }
      } else {
        console.error('Error updating vehicle data via JSONP:', error);
        throw new Error(`Failed to update vehicle data: ${error.message}`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
   */
  async getVehiclePositions(): Promise<VehiclePosition[]> {
    const maxRetries = 3;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        if (!this.session) {
          console.log(`Attempt ${attempt}: No session, logging in...`);
          await this.login();
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        const vehicles = await this.getVehicles();
        
        if (vehicles.length === 0) {
          return [];
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ update_data_flags
        // const vehicleIds = vehicles.map(v => v.id);
        // await this.updateVehicleData(vehicleIds);
        console.log('Skipping update_data_flags - using existing vehicle data');

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç VehiclePosition
        const positions: VehiclePosition[] = vehicles.map(vehicle => {
          const pos = vehicle.pos;
          const now = Math.floor(Date.now() / 1000);
          
          let status: 'online' | 'offline' | 'moving' | 'stopped' = 'offline';
          
          if (pos && (now - pos.t) < 600) { // 10 –º–∏–Ω—É—Ç
            const speed = pos.s || 0;
            status = speed > 5 ? 'moving' : 'stopped';
          }

          return {
            id: vehicle.id.toString(),
            name: vehicle.nm || `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ${vehicle.id}`,
            latitude: pos?.y || 0,
            longitude: pos?.x || 0,
            speed: pos?.s || 0,
            course: pos?.c || 0,
            timestamp: pos?.t || 0,
            status,
            driver: vehicle.driver?.nm || undefined,
            fuel: vehicle.fuel || undefined,
            mileage: vehicle.mileage || undefined,
          };
        });

        console.log(`Successfully got ${positions.length} vehicle positions on attempt ${attempt}`);
        return positions;
        
      } catch (error: any) {
        console.error(`Attempt ${attempt} failed:`, error);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 4 (Invalid session), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        if (error.message.includes('Wialon API Error: 4')) {
          console.log(`Session expired on attempt ${attempt}, clearing session...`);
          this.session = null;
          
          if (attempt < maxRetries) {
            console.log(`Retrying in 1 second... (attempt ${attempt + 1}/${maxRetries})`);
            await new Promise(resolve => setTimeout(resolve, 1000));
            continue;
          }
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        if (attempt === maxRetries) {
          console.error('All retry attempts failed');
          throw new Error(`Failed to get vehicle positions after ${maxRetries} attempts: ${error.message}`);
        }
      }
    }
    
    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ TypeScript —Ç—Ä–µ–±—É–µ—Ç return
    throw new Error('Unexpected error in getVehiclePositions');
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async logout(): Promise<void> {
    if (!this.session) {
      return;
    }

    try {
      await this.makeJsonpRequest('core/logout', {}, this.session.sid);
    } catch (error) {
      console.error('Error during JSONP logout:', error);
    } finally {
      this.session = null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  getSession(): WialonSession | null {
    return this.session;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   */
  isAuthenticated(): boolean {
    return this.session !== null;
  }
}

export const wialonJsonpService = new WialonJsonpService();