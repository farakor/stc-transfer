import { VehicleType } from '@/types'

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
export function formatPrice(price: number, currency = 'UZS'): string {
  const formatted = new Intl.NumberFormat('ru-RU').format(price)

  switch (currency) {
    case 'UZS':
      return `${formatted} —Å—É–º`
    case 'USD':
      return `$${formatted}`
    default:
      return `${formatted} ${currency}`
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
export function formatDateTime(date: string | Date): string {
  const d = new Date(date)
  return d.toLocaleString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
export function formatDate(date: string | Date): string {
  const d = new Date(date)
  return d.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
export function formatTime(date: string | Date): string {
  const d = new Date(date)
  return d.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export function getVehicleTypeName(type: VehicleType): string {
  switch (type) {
    case VehicleType.SEDAN:
      return '–°–µ–¥–∞–Ω'
    case VehicleType.PREMIUM:
      return '–ü—Ä–µ–º–∏—É–º'
    case VehicleType.MINIVAN:
      return '–ú–∏–Ω–∏–≤—ç–Ω'
    case VehicleType.MICROBUS:
      return '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å'
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export function getVehicleTypeDescription(type: VehicleType): string {
  switch (type) {
    case VehicleType.SEDAN:
      return '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å–µ–¥–∞–Ω –¥–ª—è 3 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'
    case VehicleType.PREMIUM:
      return '–ü—Ä–µ–º–∏—É–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è VIP –ø–æ–µ–∑–¥–æ–∫'
    case VehicleType.MINIVAN:
      return '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –º–∏–Ω–∏–≤—ç–Ω –¥–ª—è —Å–µ–º–µ–π –∏ –≥—Ä—É–ø–ø'
    case VehicleType.MICROBUS:
      return '–ë–æ–ª—å—à–æ–π –∞–≤—Ç–æ–±—É—Å –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫'
    default:
      return ''
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export function getVehicleTypeIcon(type: VehicleType): string {
  switch (type) {
    case VehicleType.SEDAN:
      return 'üöó'
    case VehicleType.PREMIUM:
      return 'üèéÔ∏è'
    case VehicleType.MINIVAN:
      return 'üöê'
    case VehicleType.MICROBUS:
      return 'üöå'
    default:
      return 'üöó'
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
export function getBookingStatusColor(status: string): string {
  switch (status) {
    case 'PENDING':
      return 'text-yellow-600 bg-yellow-50'
    case 'CONFIRMED':
      return 'text-blue-600 bg-blue-50'
    case 'IN_PROGRESS':
      return 'text-purple-600 bg-purple-50'
    case 'COMPLETED':
      return 'text-green-600 bg-green-50'
    case 'CANCELLED':
      return 'text-red-600 bg-red-50'
    default:
      return 'text-gray-600 bg-gray-50'
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
export function getBookingStatusName(status: string): string {
  switch (status) {
    case 'PENDING':
      return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    case 'CONFIRMED':
      return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
    case 'IN_PROGRESS':
      return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
    case 'COMPLETED':
      return '–ó–∞–≤–µ—Ä—à–µ–Ω'
    case 'CANCELLED':
      return '–û—Ç–º–µ–Ω–µ–Ω'
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }
}

// –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) {
    return text
  }
  return text.slice(0, maxLength) + '...'
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
export function isValidPhoneNumber(phone: string): boolean {
  const phoneRegex = /^\+?[1-9]\d{1,14}$/
  return phoneRegex.test(phone.replace(/\s/g, ''))
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
export function formatPhoneNumber(phone: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
  const cleaned = phone.replace(/[^\d+]/g, '')

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +998 (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)
  if (cleaned.startsWith('+998')) {
    const number = cleaned.slice(4)
    if (number.length === 9) {
      return `+998 (${number.slice(0, 2)}) ${number.slice(2, 5)} ${number.slice(5, 7)} ${number.slice(7)}`
    }
  }

  return cleaned
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –∏–º–µ–Ω–∏
export function getInitials(name: string): string {
  return name
    .split(' ')
    .map(part => part.charAt(0).toUpperCase())
    .slice(0, 2)
    .join('')
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
export function isEmpty(value: string | null | undefined): boolean {
  return !value || value.trim().length === 0
}

// –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
export function capitalize(text: string): string {
  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase()
}
