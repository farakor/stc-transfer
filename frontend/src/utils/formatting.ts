import { VehicleType } from '@/types'

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
export function formatPrice(price: number, currency = 'UZS'): string {
  const formatted = new Intl.NumberFormat('ru-RU').format(price)

  switch (currency) {
    case 'UZS':
      return `${formatted} —Å—É–º`
    case 'USD':
      return `$${formatted}`
    default:
      return `${formatted} ${currency}`
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
export function formatDateTime(date: string | Date): string {
  const d = new Date(date)
  return d.toLocaleString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
export function formatDate(date: string | Date): string {
  const d = new Date(date)
  return d.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
export function formatTime(date: string | Date): string {
  const d = new Date(date)
  return d.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export function getVehicleTypeName(type: VehicleType): string {
  switch (type) {
    case VehicleType.SEDAN:
      return '–°–µ–¥–∞–Ω'
    case VehicleType.PREMIUM:
      return '–ü—Ä–µ–º–∏—É–º'
    case VehicleType.MINIVAN:
      return '–ú–∏–Ω–∏–≤—ç–Ω'
    case VehicleType.MICROBUS:
      return '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å'
    case VehicleType.BUS:
      return '–ê–≤—Ç–æ–±—É—Å'
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export function getVehicleTypeDescription(type: VehicleType): string {
  switch (type) {
    case VehicleType.SEDAN:
      return '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å–µ–¥–∞–Ω –¥–ª—è 3 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'
    case VehicleType.PREMIUM:
      return '–ü—Ä–µ–º–∏—É–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è VIP –ø–æ–µ–∑–¥–æ–∫'
    case VehicleType.MINIVAN:
      return '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –º–∏–Ω–∏–≤—ç–Ω –¥–ª—è —Å–µ–º–µ–π –∏ –≥—Ä—É–ø–ø'
    case VehicleType.MICROBUS:
      return '–ë–æ–ª—å—à–æ–π –∞–≤—Ç–æ–±—É—Å –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫'
    case VehicleType.BUS:
      return '–ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–±—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø'
    default:
      return ''
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export function getVehicleTypeIcon(type: VehicleType): string {
  switch (type) {
    case VehicleType.SEDAN:
      return 'üöó'
    case VehicleType.PREMIUM:
      return 'üèéÔ∏è'
    case VehicleType.MINIVAN:
      return 'üöê'
    case VehicleType.MICROBUS:
      return 'üöå'
    case VehicleType.BUS:
      return 'üöå'
    default:
      return 'üöó'
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –±—Ä–µ–Ω–¥—É –∏ –º–æ–¥–µ–ª–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
export function getVehicleImage(brand?: string, model?: string): string | null {
  if (!brand || !model) return null

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  const fullName = `${brand} ${model}`.toLowerCase()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  if (fullName.includes('hongqi ehs 5') || fullName.includes('hongqi ehs5') || fullName.includes('hongqi ehs eq5')) {
    return new URL('../assets/eqm5_black.png', import.meta.url).href
  }
  if (fullName.includes('hongqi ehs 9') || fullName.includes('hongqi ehs9') || fullName.includes('hongqi ehs eq9')) {
    return new URL('../assets/ehs9.png', import.meta.url).href
  }
  if (fullName.includes('kia carnival')) {
    return new URL('../assets/carnival-kia-black-30.png', import.meta.url).href
  }
  if (fullName.includes('mercedes') && fullName.includes('sprinter')) {
    return new URL('../assets/mercedes-benz-sprinter.png', import.meta.url).href
  }
  if (fullName.includes('higer') || fullName.includes('–∞–≤—Ç–æ–±—É—Å higer')) {
    return new URL('../assets/higer-bus.png', import.meta.url).href
  }

  // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const brandModel = `${brand.toLowerCase()}_${model.toLowerCase().replace(/\s+/g, '')}`
  switch (brandModel) {
    case 'hongqi_ehs5':
      return new URL('../assets/eqm5_black.png', import.meta.url).href
    case 'hongqi_ehs9':
      return new URL('../assets/ehs9.png', import.meta.url).href
    case 'kia_carnival':
      return new URL('../assets/carnival-kia-black-30.png', import.meta.url).href
    case 'mercedes-benz_sprinter':
      return new URL('../assets/mercedes-benz-sprinter.png', import.meta.url).href
    case 'higer_bus':
      return new URL('../assets/higer-bus.png', import.meta.url).href
    default:
      return null
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∫–æ–Ω–∫–∏ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
export function getVehicleDisplayElement(type: VehicleType, brand?: string, model?: string): { type: 'emoji' | 'image', content: string } {
  const image = getVehicleImage(brand, model)

  if (image) {
    return { type: 'image', content: image }
  }

  return { type: 'emoji', content: getVehicleTypeIcon(type) }
}

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
export function getRepresentativeVehicle(type: VehicleType): { brand: string, model: string } {
  switch (type) {
    case VehicleType.SEDAN:
      return { brand: 'Hongqi', model: 'EHS 5' }
    case VehicleType.PREMIUM:
      return { brand: 'Hongqi', model: 'EHS 9' }
    case VehicleType.MINIVAN:
      return { brand: 'KIA', model: 'Carnival' }
    case VehicleType.MICROBUS:
      return { brand: 'Mercedes-Benz', model: 'Sprinter' }
    case VehicleType.BUS:
      return { brand: 'Higer', model: 'Bus' }
    default:
      return { brand: '', model: '' }
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Ç–∏–ø–∞
export function getVehicleModelName(type: VehicleType): string {
  switch (type) {
    case VehicleType.SEDAN:
      return '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 5'
    case VehicleType.PREMIUM:
      return '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å Hongqi EHS 9'
    case VehicleType.MINIVAN:
      return 'KIA Carnival'
    case VehicleType.MICROBUS:
      return 'Mercedes-Benz Sprinter'
    case VehicleType.BUS:
      return '–ê–≤—Ç–æ–±—É—Å Higer'
    default:
      return getVehicleTypeName(type)
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
export function getBookingStatusColor(status: string): string {
  switch (status) {
    case 'PENDING':
      return 'text-yellow-600 bg-yellow-50'
    case 'VEHICLE_ASSIGNED':
      return 'text-orange-600 bg-orange-50'
    case 'CONFIRMED':
      return 'text-blue-600 bg-blue-50'
    case 'IN_PROGRESS':
      return 'text-purple-600 bg-purple-50'
    case 'COMPLETED':
      return 'text-green-600 bg-green-50'
    case 'CANCELLED':
      return 'text-red-600 bg-red-50'
    default:
      return 'text-gray-600 bg-gray-50'
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
export function getBookingStatusName(status: string): string {
  switch (status) {
    case 'PENDING':
      return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    case 'VEHICLE_ASSIGNED':
      return '–ú–∞—à–∏–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'
    case 'CONFIRMED':
      return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
    case 'IN_PROGRESS':
      return '–í –ø—É—Ç–∏'
    case 'COMPLETED':
      return '–ó–∞–≤–µ—Ä—à–µ–Ω'
    case 'CANCELLED':
      return '–û—Ç–º–µ–Ω–µ–Ω'
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }
}

// –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) {
    return text
  }
  return text.slice(0, maxLength) + '...'
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
export function isValidPhoneNumber(phone: string): boolean {
  const phoneRegex = /^\+?[1-9]\d{1,14}$/
  return phoneRegex.test(phone.replace(/\s/g, ''))
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
export function formatPhoneNumber(phone: string): string {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
  const cleaned = phone.replace(/[^\d+]/g, '')

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +998 (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)
  if (cleaned.startsWith('+998')) {
    const number = cleaned.slice(4)
    if (number.length === 9) {
      return `+998 (${number.slice(0, 2)}) ${number.slice(2, 5)} ${number.slice(5, 7)} ${number.slice(7)}`
    }
  }

  return cleaned
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –∏–º–µ–Ω–∏
export function getInitials(name: string): string {
  return name
    .split(' ')
    .map(part => part.charAt(0).toUpperCase())
    .slice(0, 2)
    .join('')
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
export function isEmpty(value: string | null | undefined): boolean {
  return !value || value.trim().length === 0
}

// –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
export function capitalize(text: string): string {
  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase()
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–µ–∑–¥–∫–∞ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É
export function isSamarkandTrip(toLocation: string): boolean {
  return toLocation === '–ü–æ–µ–∑–¥–∫–∞ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É'
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ–µ–∑–¥–∫–∏ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É
export function formatTripPrice(price: number, toLocation: string, currency = 'UZS'): string {
  if (isSamarkandTrip(toLocation)) {
    return '–°—É–º–º–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏'
  }
  return formatPrice(price, currency)
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –ø–æ –°–∞–º–∞—Ä–∫–∞–Ω–¥—É (—Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API)
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API
export function getSamarkandTariffs(vehicleType: string): { perKm: number; hourly: number } {
  // Fallback –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  const fallbackTariffs: Record<string, { perKm: number; hourly: number }> = {
    'SEDAN': { perKm: 15000, hourly: 150000 },
    'PREMIUM': { perKm: 40000, hourly: 400000 },
    'BUS': { perKm: 0, hourly: 325000 },
    'MICROBUS': { perKm: 25000, hourly: 200000 },
    'MINIVAN': { perKm: 20000, hourly: 180000 },
  }

  return fallbackTariffs[vehicleType] || { perKm: 0, hourly: 0 }
}
