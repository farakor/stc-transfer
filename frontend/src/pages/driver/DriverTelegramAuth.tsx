import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTelegramWebApp } from '@/hooks/useTelegramWebApp';
import { RefreshCw, AlertCircle, CheckCircle, User } from 'lucide-react';
import { api } from '@/services/api';

interface AuthState {
  status: 'loading' | 'authenticating' | 'success' | 'error';
  message: string;
}

const DriverTelegramAuth: React.FC = () => {
  const navigate = useNavigate();
  const { webApp, isReady, user, isInTelegram } = useTelegramWebApp();
  const [authState, setAuthState] = useState<AuthState>({
    status: 'loading',
    message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'
  });

  useEffect(() => {
    if (webApp && isReady) {
      try {
        webApp.ready();
        webApp.expand();
      } catch (error) {
        console.log('‚ö†Ô∏è Telegram WebApp methods not available:', error);
      }
    }
  }, [webApp, isReady]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å
    const savedDriver = localStorage.getItem('driver');
    const savedAuthToken = localStorage.getItem('driverAuthToken');

    if (savedDriver && savedAuthToken) {
      console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      setAuthState({
        status: 'success',
        message: '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'
      });
      setTimeout(() => {
        navigate('/driver/dashboard');
      }, 1000);
      return;
    }

    // –ï—Å–ª–∏ –≤ Telegram –∏ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (isInTelegram && isReady && user) {
      authenticateDriver();
    } else if (!isInTelegram) {
      // –ù–µ –≤ Telegram
      setAuthState({
        status: 'error',
        message: '–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram'
      });
    }
  }, [isInTelegram, isReady, user, navigate]);

  const authenticateDriver = async () => {
    try {
      setAuthState({
        status: 'authenticating',
        message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...'
      });

      const initData = webApp?.initData || '';
      const userData = user ? {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        username: user.username,
        language_code: user.language_code,
        photo_url: user.photo_url,
      } : null;

      console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram...');
      console.log('üìù Init Data:', initData);
      console.log('üë§ User Data:', userData);

      const response = await api.post('/auth/driver/telegram', {
        initData,
        userData
      });

      if (response.data.success) {
        const { driver, authToken } = response.data.data;

        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        console.log('üë§ –í–æ–¥–∏—Ç–µ–ª—å:', driver);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
        localStorage.setItem('driver', JSON.stringify(driver));
        localStorage.setItem('driverAuthToken', authToken);

        setAuthState({
          status: 'success',
          message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${driver.name}!`
        });

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
          navigate('/driver/dashboard');
        }, 1500);
      } else {
        throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è';
      
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }

      // –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
      if (errorMessage.includes('not found') || errorMessage.includes('Please share your phone number')) {
        errorMessage = '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±–æ—Ç–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π (@stc_driver_bot).';
      }

      setAuthState({
        status: 'error',
        message: errorMessage
      });
    }
  };

  const handleRetry = () => {
    setAuthState({
      status: 'loading',
      message: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...'
    });
    setTimeout(() => {
      authenticateDriver();
    }, 500);
  };

  const getStatusIcon = () => {
    switch (authState.status) {
      case 'loading':
      case 'authenticating':
        return <RefreshCw className="w-16 h-16 text-gray-900 animate-spin" />;
      case 'success':
        return <CheckCircle className="w-16 h-16 text-green-600" />;
      case 'error':
        return <AlertCircle className="w-16 h-16 text-red-600" />;
      default:
        return <User className="w-16 h-16 text-gray-400" />;
    }
  };

  const getStatusColor = () => {
    switch (authState.status) {
      case 'success':
        return 'text-green-600';
      case 'error':
        return 'text-red-600';
      default:
        return 'text-gray-900';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-lg p-8 max-w-md w-full text-center">
        {/* –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ */}
        <div className="flex justify-center mb-6">
          {getStatusIcon()}
        </div>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h1 className="text-2xl font-bold text-gray-900 mb-2">
          –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        </h1>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
        <p className={`text-base mb-6 ${getStatusColor()}`}>
          {authState.message}
        </p>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        {user && authState.status !== 'error' && (
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <div className="flex items-center justify-center space-x-3">
              {user.photo_url ? (
                <img 
                  src={user.photo_url} 
                  alt={user.first_name}
                  className="w-12 h-12 rounded-full object-cover"
                />
              ) : (
                <div className="w-12 h-12 bg-gray-900 rounded-full flex items-center justify-center">
                  <User className="w-6 h-6 text-white" />
                </div>
              )}
              <div className="text-left">
                <p className="font-medium text-gray-900">
                  {user.first_name} {user.last_name || ''}
                </p>
                {user.username && (
                  <p className="text-sm text-gray-500">@{user.username}</p>
                )}
              </div>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ */}
        {authState.status === 'error' && (
          <button
            onClick={handleRetry}
            className="w-full bg-gray-900 text-white py-3 rounded-lg font-medium hover:bg-gray-800 transition-colors"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ */}
        {authState.status === 'error' && (
          <div className="mt-4 text-sm text-gray-600 text-left bg-blue-50 p-4 rounded-lg">
            <p className="font-medium text-blue-900 mb-2">üí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å:</p>
            <ol className="list-decimal list-inside space-y-1 text-blue-800">
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ Telegram</li>
              <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</li>
              <li>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞</li>
              <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</li>
            </ol>
          </div>
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {(authState.status === 'loading' || authState.status === 'authenticating') && (
          <div className="mt-4">
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div className="bg-gray-900 h-2 rounded-full animate-pulse" style={{ width: '60%' }}></div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DriverTelegramAuth;

