import React, { useState, useEffect } from 'react';
import {
  DollarSign,
  Save,
  AlertCircle,
  CheckCircle,
  Car,
  Users,
  Plus,
  MapPin,
  Navigation,
  Edit3,
  Trash2,
  Search,
  Filter,
  Download,
  Upload,
  Settings,
  RefreshCw,
  ArrowRight,
  Clock,
  Calculator
} from 'lucide-react';

interface VehicleModel {
  brand: string;
  model: string;
  name: string;
  type: string;
  capacity: number;
  features: string[];
  description?: string;
  count: number;
}

interface LocationData {
  id: number;
  name: string;
  type: string;
  is_active: boolean;
}

interface RouteData {
  id: number;
  from_location: LocationData;
  to_location: LocationData;
  distance_km?: number | null;
  estimated_duration_minutes?: number | null;
  is_active: boolean;
}

interface TariffData {
  id: number;
  route_id: number;
  vehicle_brand: string;
  vehicle_model: string;
  base_price: number;
  price_per_km: number;
  minimum_price?: number;
  night_surcharge_percent?: number;
  holiday_surcharge_percent?: number;
  waiting_price_per_minute?: number;
  is_active: boolean;
  valid_from?: Date;
  valid_until?: Date;
  route?: RouteData;
}

interface TariffMatrix {
  routes: RouteData[];
  vehicleModels: VehicleModel[];
  tariffs: { [routeId: number]: { [vehicleKey: string]: TariffData } };
}

const TariffsManagement: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [matrix, setMatrix] = useState<TariffMatrix | null>(null);
  const [allLocations, setAllLocations] = useState<LocationData[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedRoute, setSelectedRoute] = useState<number | null>(null);
  const [selectedVehicle, setSelectedVehicle] = useState<string | null>(null);
  const [showAddLocationModal, setShowAddLocationModal] = useState(false);
  const [showAddRouteModal, setShowAddRouteModal] = useState(false);
  const [editingTariff, setEditingTariff] = useState<TariffData | null>(null);
  const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [activeTab, setActiveTab] = useState<'matrix' | 'routes' | 'locations'>('matrix');
  const [newVehiclesCount, setNewVehiclesCount] = useState(0);

  // –§–æ—Ä–º–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞
  const [tariffForm, setTariffForm] = useState({
    route_id: 0,
    vehicle_brand: '',
    vehicle_model: '',
    base_price: 0,
    price_per_km: 0,
    minimum_price: 0,
    night_surcharge_percent: 0,
    holiday_surcharge_percent: 0,
    waiting_price_per_minute: 0,
    is_active: true
  });

  // –§–æ—Ä–º–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
  const [locationForm, setLocationForm] = useState({
    name: '',
    type: 'city'
  });

  // –§–æ—Ä–º–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
  const [routeForm, setRouteForm] = useState({
    from_location_id: 0,
    to_location_id: 0,
    distance_km: 0,
    estimated_duration_minutes: 0
  });

  useEffect(() => {
    loadTariffMatrix();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ç–∞—Ä–∏—Ñ–æ–≤...');
      loadTariffMatrix(true); // silent = true –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const loadAllLocations = async () => {
    try {
      console.log('üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏...');

      const response = await fetch('http://localhost:3001/api/admin/tariffs/locations');

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π');
      }

      const result = await response.json();

      if (result.success) {
        setAllLocations(result.data);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π:', result.data.length);
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π:', error);
    }
  };

  const loadTariffMatrix = async (silent = false) => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Ç—Ä–∏—Ü—ã —Ç–∞—Ä–∏—Ñ–æ–≤...');
      if (!silent) {
        setLoading(true);
        setSaveStatus('idle');
      }

      const response = await fetch('http://localhost:3001/api/admin/tariffs/matrix');
      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);

      if (data.success) {
        const oldVehicleCount = matrix?.vehicleModels?.length || 0;
        const newVehicleCount = data.data.vehicleModels?.length || 0;

        setMatrix(data.data);
        console.log('‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏
        await loadAllLocations();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        if (oldVehicleCount > 0 && newVehicleCount > oldVehicleCount) {
          const newCount = newVehicleCount - oldVehicleCount;
          console.log(`üöó –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newCount} –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!`);
          setNewVehiclesCount(newCount);
          if (!silent) {
            setSaveStatus('success');
          }
        } else if (!silent) {
          setSaveStatus('success');
          setNewVehiclesCount(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        }
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã —Ç–∞—Ä–∏—Ñ–æ–≤:', error);
      if (!silent) {
        setSaveStatus('error');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${errorMessage}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –ó–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É 3001\n2. –ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π`);
      }
    } finally {
      if (!silent) {
        setLoading(false);
      }
    }
  };

  const saveTariff = async (tariffData: any) => {
    try {
      setSaving(true);
      setSaveStatus('idle');

      const response = await fetch('http://localhost:3001/api/admin/tariffs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(tariffData),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞');
      }

      const result = await response.json();
      if (result.success) {
        setSaveStatus('success');
        await loadTariffMatrix(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => setSaveStatus('idle'), 3000);
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', error);
      setSaveStatus('error');
    } finally {
      setSaving(false);
    }
  };

  const handleTariffEdit = (route: RouteData, vehicle: VehicleModel) => {
    const vehicleKey = `${vehicle.brand}-${vehicle.model}`;
    const existingTariff = matrix?.tariffs[route.id]?.[vehicleKey];

    if (existingTariff) {
      setTariffForm({
        route_id: existingTariff.route_id,
        vehicle_brand: existingTariff.vehicle_brand,
        vehicle_model: existingTariff.vehicle_model,
        base_price: existingTariff.base_price,
        price_per_km: existingTariff.price_per_km,
        minimum_price: existingTariff.minimum_price || 0,
        night_surcharge_percent: existingTariff.night_surcharge_percent || 0,
        holiday_surcharge_percent: existingTariff.holiday_surcharge_percent || 0,
        waiting_price_per_minute: existingTariff.waiting_price_per_minute || 0,
        is_active: existingTariff.is_active
      });
      setEditingTariff(existingTariff);
    } else {
      setTariffForm({
        route_id: route.id,
        vehicle_brand: vehicle.brand,
        vehicle_model: vehicle.model,
        base_price: 0,
        price_per_km: 0,
        minimum_price: 0,
        night_surcharge_percent: 0,
        holiday_surcharge_percent: 0,
        waiting_price_per_minute: 0,
        is_active: true
      });
      setEditingTariff(null);
    }
  };

  const handleSaveTariff = async () => {
    await saveTariff(tariffForm);
    setEditingTariff(null);
  };

  const createLocation = async () => {
    try {
      console.log('üèôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:', locationForm);
      setSaving(true);

      if (!locationForm.name || !locationForm.type) {
        throw new Error('–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      }

      const response = await fetch('http://localhost:3001/api/admin/tariffs/locations', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(locationForm)
      });

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', errorText);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:', result);

      if (result.success) {
        console.log('üéâ –õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, ID:', result.data.id);
        console.log('üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
        setShowAddLocationModal(false);
        console.log('üßπ –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É...');
        setLocationForm({ name: '', type: 'city' });
        console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞...');
        setSaveStatus('success');
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É...');
        await loadTariffMatrix();
        console.log('‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞...');
        setTimeout(() => {
          console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ idle');
          setSaveStatus('idle');
        }, 3000);
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: ${error.message}`);
      setSaveStatus('error');
      setTimeout(() => setSaveStatus('idle'), 3000);
    } finally {
      setSaving(false);
    }
  };

  const createRoute = async () => {
    try {
      setSaving(true);
      const response = await fetch('http://localhost:3001/api/admin/tariffs/routes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(routeForm)
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
      }

      const result = await response.json();
      if (result.success) {
        setShowAddRouteModal(false);
        setRouteForm({ from_location_id: 0, to_location_id: 0, distance_km: 0, estimated_duration_minutes: 0 });
        setSaveStatus('success');
        await loadTariffMatrix();
        setTimeout(() => setSaveStatus('idle'), 3000);
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
      setSaveStatus('error');
      setTimeout(() => setSaveStatus('idle'), 3000);
    } finally {
      setSaving(false);
    }
  };

  const getLocationTypeIcon = (type: string) => {
    switch (type) {
      case 'airport': return '‚úàÔ∏è';
      case 'station': return 'üöÇ';
      case 'attraction': return 'üèõÔ∏è';
      default: return 'üèôÔ∏è';
    }
  };

  const getVehicleTypeIcon = (type: string) => {
    switch (type) {
      case 'SEDAN': return 'üöó';
      case 'PREMIUM': return 'üöô';
      case 'MINIVAN': return 'üöê';
      case 'MICROBUS': return 'üöå';
      case 'BUS': return 'üöç';
      default: return 'üöó';
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('uz-UZ').format(price) + ' —Å—É–º';
  };

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-64 space-y-4">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <div className="text-center">
          <p className="text-gray-600 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤...</p>
          <p className="text-sm text-gray-500">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 3001</p>
          {saveStatus === 'error' && (
            <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-600 mb-2">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
              <button
                onClick={loadTariffMatrix}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
              >
                üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
              </button>
            </div>
          )}
        </div>
      </div>
    );
  }

  if (!matrix) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <p className="text-gray-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
          <button
            onClick={loadTariffMatrix}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center">
            <Calculator className="w-8 h-8 mr-3 text-blue-600" />
            –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤
          </h1>
          <p className="text-gray-600 mt-1">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º –∏ –º–æ–¥–µ–ª—è–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
          </p>
        </div>

        <div className="flex items-center space-x-3">
          {newVehiclesCount > 0 && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <p className="text-sm text-green-700 font-medium">
                üöó –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {newVehiclesCount} –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!
              </p>
              <p className="text-xs text-green-600">
                –û–Ω–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–∞—Ç—Ä–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤
              </p>
            </div>
          )}
          <div className="text-right">
            <p className="text-sm text-gray-500">
              üí° –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å? –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å"
            </p>
            <p className="text-xs text-gray-400">
              –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
            </p>
          </div>
          <button
            onClick={() => loadTariffMatrix(false)}
            disabled={loading}
            className="flex items-center px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 disabled:opacity-50 transition-colors"
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            –û–±–Ω–æ–≤–∏—Ç—å
            {newVehiclesCount > 0 && (
              <span className="ml-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full">
                +{newVehiclesCount}
              </span>
            )}
          </button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      {saveStatus === 'success' && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center">
            <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
            <p className="text-green-800">–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</p>
          </div>
        </div>
      )}

      {saveStatus === 'error' && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center">
            <AlertCircle className="w-5 h-5 text-red-600 mr-2" />
            <p className="text-red-800">–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞</p>
          </div>
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="bg-white rounded-lg shadow">
        <div className="flex border-b border-gray-200">
          <button
            onClick={() => setActiveTab('matrix')}
            className={`flex items-center px-6 py-4 text-sm font-medium border-b-2 ${activeTab === 'matrix'
              ? 'border-blue-500 text-blue-600'
              : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
          >
            <Calculator className="w-4 h-4 mr-2" />
            –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
          </button>
          <button
            onClick={() => setActiveTab('routes')}
            className={`flex items-center px-6 py-4 text-sm font-medium border-b-2 ${activeTab === 'routes'
              ? 'border-blue-500 text-blue-600'
              : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
          >
            <Navigation className="w-4 h-4 mr-2" />
            –ú–∞—Ä—à—Ä—É—Ç—ã ({matrix.routes.length})
          </button>
          <button
            onClick={() => setActiveTab('locations')}
            className={`flex items-center px-6 py-4 text-sm font-medium border-b-2 ${activeTab === 'locations'
              ? 'border-blue-500 text-blue-600'
              : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
          >
            <MapPin className="w-4 h-4 mr-2" />
            –õ–æ–∫–∞—Ü–∏–∏ ({allLocations.length})
          </button>
        </div>

        <div className="p-6">
          {/* –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ */}
          {activeTab === 'matrix' && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="relative">
                    <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    <input
                      type="text"
                      placeholder="–ü–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>

                <div className="text-sm text-gray-600">
                  {matrix.routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ √ó {matrix.vehicleModels.length} –º–æ–¥–µ–ª–µ–π
                </div>
              </div>

              {/* –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç—Ä–∏—Ü—ã */}
              <div className="overflow-x-auto bg-white rounded-lg border border-gray-200">
                <table className="w-full border-collapse">
                  <thead>
                    <tr>
                      <th className="sticky left-0 bg-gray-50 border border-gray-200 px-4 py-3 text-left text-sm font-medium text-gray-700 min-w-[200px]">
                        –ú–∞—Ä—à—Ä—É—Ç
                      </th>
                      {matrix.vehicleModels.map((vehicle) => (
                        <th
                          key={`${vehicle.brand}-${vehicle.model}`}
                          className="border border-gray-200 px-3 py-3 text-center text-sm font-medium text-gray-700 min-w-[120px]"
                        >
                          <div className="flex flex-col items-center">
                            <span className="text-lg mb-1">{getVehicleTypeIcon(vehicle.type)}</span>
                            <span className="font-semibold">{vehicle.brand}</span>
                            <span className="text-xs text-gray-500">{vehicle.model}</span>
                            <span className="text-xs text-blue-600">({vehicle.count} –∞–≤—Ç–æ)</span>
                          </div>
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {matrix.routes
                      .filter(route =>
                        !searchTerm ||
                        route.from_location.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        route.to_location.name.toLowerCase().includes(searchTerm.toLowerCase())
                      )
                      .map((route) => (
                        <tr key={route.id} className="hover:bg-gray-50">
                          <td className="sticky left-0 bg-white border border-gray-200 px-4 py-3">
                            <div className="flex items-center space-x-2">
                              <span className="text-sm">{getLocationTypeIcon(route.from_location.type)}</span>
                              <span className="font-medium text-sm">{route.from_location.name}</span>
                              <ArrowRight className="w-4 h-4 text-gray-400" />
                              <span className="text-sm">{getLocationTypeIcon(route.to_location.type)}</span>
                              <span className="font-medium text-sm">{route.to_location.name}</span>
                            </div>
                            {route.distance_km && (
                              <div className="text-xs text-gray-500 mt-1 flex items-center space-x-3">
                                <span>üìè {route.distance_km} –∫–º</span>
                                {route.estimated_duration_minutes && (
                                  <span className="flex items-center">
                                    <Clock className="w-3 h-3 mr-1" />
                                    {Math.floor(route.estimated_duration_minutes / 60)}—á {route.estimated_duration_minutes % 60}–º
                                  </span>
                                )}
                              </div>
                            )}
                          </td>
                          {matrix.vehicleModels.map((vehicle) => {
                            const vehicleKey = `${vehicle.brand}-${vehicle.model}`;
                            const tariff = matrix.tariffs[route.id]?.[vehicleKey];

                            return (
                              <td
                                key={vehicleKey}
                                className="border border-gray-200 px-3 py-3 text-center"
                              >
                                {tariff ? (
                                  <div className="space-y-1">
                                    <div className="text-sm font-semibold text-green-700">
                                      {formatPrice(tariff.base_price)}
                                    </div>
                                    {tariff.price_per_km > 0 && (
                                      <div className="text-xs text-gray-600">
                                        +{formatPrice(tariff.price_per_km)}/–∫–º
                                      </div>
                                    )}
                                    <button
                                      onClick={() => handleTariffEdit(route, vehicle)}
                                      className="text-xs text-blue-600 hover:text-blue-800 flex items-center mx-auto"
                                    >
                                      <Edit3 className="w-3 h-3 mr-1" />
                                      –ò–∑–º–µ–Ω–∏—Ç—å
                                    </button>
                                  </div>
                                ) : (
                                  <button
                                    onClick={() => handleTariffEdit(route, vehicle)}
                                    className="text-xs text-gray-400 hover:text-blue-600 flex items-center mx-auto"
                                  >
                                    <Plus className="w-3 h-3 mr-1" />
                                    –î–æ–±–∞–≤–∏—Ç—å
                                  </button>
                                )}
                              </td>
                            );
                          })}
                        </tr>
                      ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* –ú–∞—Ä—à—Ä—É—Ç—ã */}
          {activeTab === 'routes' && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏</h3>
                <button
                  onClick={() => setShowAddRouteModal(true)}
                  className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {matrix.routes.map((route) => (
                  <div key={route.id} className="border border-gray-200 rounded-lg p-4 bg-white">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-2">
                        <span>{getLocationTypeIcon(route.from_location.type)}</span>
                        <span className="font-medium text-sm">{route.from_location.name}</span>
                      </div>
                      <ArrowRight className="w-4 h-4 text-gray-400" />
                      <div className="flex items-center space-x-2">
                        <span>{getLocationTypeIcon(route.to_location.type)}</span>
                        <span className="font-medium text-sm">{route.to_location.name}</span>
                      </div>
                    </div>

                    {route.distance_km && (
                      <div className="text-sm text-gray-600 space-y-1">
                        <div>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {route.distance_km} –∫–º</div>
                        {route.estimated_duration_minutes && (
                          <div className="flex items-center">
                            <Clock className="w-4 h-4 mr-1" />
                            –í—Ä–µ–º—è: {Math.floor(route.estimated_duration_minutes / 60)}—á {route.estimated_duration_minutes % 60}–º
                          </div>
                        )}
                      </div>
                    )}

                    <div className="mt-3 text-xs text-gray-500">
                      –¢–∞—Ä–∏—Ñ–æ–≤: {Object.keys(matrix.tariffs[route.id] || {}).length}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –õ–æ–∫–∞—Ü–∏–∏ */}
          {activeTab === 'locations' && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏</h3>
                <button
                  onClick={() => setShowAddLocationModal(true)}
                  className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {allLocations.map((location) => (
                  <div key={location.id} className="border border-gray-200 rounded-lg p-4 bg-white">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-2xl">{getLocationTypeIcon(location.type)}</span>
                      <div>
                        <div className="font-medium">{location.name}</div>
                        <div className="text-sm text-gray-500 capitalize">{location.type}</div>
                      </div>
                    </div>

                    <div className="text-xs text-gray-500">
                      –ú–∞—Ä—à—Ä—É—Ç–æ–≤: {matrix.routes.filter(r =>
                        r.from_location.id === location.id || r.to_location.id === location.id
                      ).length}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ */}
      {(editingTariff !== null || tariffForm.route_id > 0) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">
              {editingTariff ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ'}
            </h3>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (—Å—É–º)
                </label>
                <input
                  type="number"
                  value={tariffForm.base_price}
                  onChange={(e) => setTariffForm({ ...tariffForm, base_price: parseFloat(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –¶–µ–Ω–∞ –∑–∞ –∫–º (—Å—É–º)
                </label>
                <input
                  type="number"
                  value={tariffForm.price_per_km}
                  onChange={(e) => setTariffForm({ ...tariffForm, price_per_km: parseFloat(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (—Å—É–º)
                </label>
                <input
                  type="number"
                  value={tariffForm.minimum_price}
                  onChange={(e) => setTariffForm({ ...tariffForm, minimum_price: parseFloat(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ù–æ—á–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (%)
                  </label>
                  <input
                    type="number"
                    value={tariffForm.night_surcharge_percent}
                    onChange={(e) => setTariffForm({ ...tariffForm, night_surcharge_percent: parseFloat(e.target.value) || 0 })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (%)
                  </label>
                  <input
                    type="number"
                    value={tariffForm.holiday_surcharge_percent}
                    onChange={(e) => setTariffForm({ ...tariffForm, holiday_surcharge_percent: parseFloat(e.target.value) || 0 })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –û–∂–∏–¥–∞–Ω–∏–µ (—Å—É–º/–º–∏–Ω)
                </label>
                <input
                  type="number"
                  value={tariffForm.waiting_price_per_minute}
                  onChange={(e) => setTariffForm({ ...tariffForm, waiting_price_per_minute: parseFloat(e.target.value) || 0 })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>

            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setEditingTariff(null);
                  setTariffForm({
                    route_id: 0,
                    vehicle_brand: '',
                    vehicle_model: '',
                    base_price: 0,
                    price_per_km: 0,
                    minimum_price: 0,
                    night_surcharge_percent: 0,
                    holiday_surcharge_percent: 0,
                    waiting_price_per_minute: 0,
                    is_active: true
                  });
                }}
                className="px-4 py-2 text-gray-600 hover:text-gray-800"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleSaveTariff}
                disabled={saving}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                <Save className="w-4 h-4 mr-2" />
                {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ */}
      {showAddLocationModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é</h3>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ù–∞–∑–≤–∞–Ω–∏–µ
                </label>
                <input
                  type="text"
                  value={locationForm.name}
                  onChange={(e) => {
                    console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', e.target.value);
                    setLocationForm({ ...locationForm, name: e.target.value });
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—Ä–≥–µ–Ω—á"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –¢–∏–ø
                </label>
                <select
                  value={locationForm.type}
                  onChange={(e) => {
                    console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏:', e.target.value);
                    setLocationForm({ ...locationForm, type: e.target.value });
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                >
                  <option value="city">–ì–æ—Ä–æ–¥</option>
                  <option value="airport">–ê—ç—Ä–æ–ø–æ—Ä—Ç</option>
                  <option value="station">–í–æ–∫–∑–∞–ª</option>
                  <option value="attraction">–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
                </select>
              </div>
            </div>

            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowAddLocationModal(false);
                  setLocationForm({ name: '', type: 'city' });
                }}
                className="px-4 py-2 text-gray-600 hover:text-gray-800"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={() => {
                  console.log('üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏');
                  console.log('üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', locationForm);
                  if (!saving) {
                    createLocation();
                  } else {
                    console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫');
                  }
                }}
                disabled={saving || !locationForm.name.trim()}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {saving ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                ) : (
                  <Plus className="w-4 h-4 mr-2" />
                )}
                {saving ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ */}
      {showAddRouteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</h3>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –û—Ç–∫—É–¥–∞
                </label>
                <select
                  value={routeForm.from_location_id}
                  onChange={(e) => setRouteForm({ ...routeForm, from_location_id: parseInt(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value={0}>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>
                  {allLocations.map((location) => (
                    <option key={location.id} value={location.id}>
                      {getLocationTypeIcon(location.type)} {location.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ö—É–¥–∞
                </label>
                <select
                  value={routeForm.to_location_id}
                  onChange={(e) => setRouteForm({ ...routeForm, to_location_id: parseInt(e.target.value) })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value={0}>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>
                  {allLocations
                    .filter(location => location.id !== routeForm.from_location_id)
                    .map((location) => (
                      <option key={location.id} value={location.id}>
                        {getLocationTypeIcon(location.type)} {location.name}
                      </option>
                    ))}
                </select>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)
                  </label>
                  <input
                    type="number"
                    value={routeForm.distance_km}
                    onChange={(e) => setRouteForm({ ...routeForm, distance_km: parseFloat(e.target.value) || 0 })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –í—Ä–µ–º—è (–º–∏–Ω)
                  </label>
                  <input
                    type="number"
                    value={routeForm.estimated_duration_minutes}
                    onChange={(e) => setRouteForm({ ...routeForm, estimated_duration_minutes: parseInt(e.target.value) || 0 })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowAddRouteModal(false);
                  setRouteForm({ from_location_id: 0, to_location_id: 0, distance_km: 0, estimated_duration_minutes: 0 });
                }}
                className="px-4 py-2 text-gray-600 hover:text-gray-800"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={createRoute}
                disabled={saving || !routeForm.from_location_id || !routeForm.to_location_id}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {saving ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                ) : (
                  <Plus className="w-4 h-4 mr-2" />
                )}
                {saving ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TariffsManagement;
