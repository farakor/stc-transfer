import React, { useState, useEffect } from 'react';
import {
  Settings,
  Bell,
  Globe,
  Save,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  Info,
  Edit,
  X,
  Plus
} from 'lucide-react';

interface SystemSetting {
  id: number;
  key: string;
  value: string;
  type: 'STRING' | 'NUMBER' | 'BOOLEAN' | 'JSON';
  category: string;
  description?: string;
  createdAt: string;
  updatedAt: string;
}

interface NotificationSettings {
  telegramBotToken: string;
  dispatcherChatId: string;
  newOrderNotifications: boolean;
  statusUpdateNotifications: boolean;
  driverAssignmentNotifications: boolean;
  customerNotifications: boolean;
  systemAlerts: boolean;
}

interface GeneralSettings {
  companyName: string;
  supportPhone: string;
  supportEmail: string;
  defaultLanguage: string;
  timezone: string;
  currency: string;
  workingHours: {
    start: string;
    end: string;
  };
  maxAdvanceBookingDays: number;
}

const SystemSettings: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState<'notifications' | 'general'>('notifications');
  const [settings, setSettings] = useState<SystemSetting[]>([]);
  const [hasChanges, setHasChanges] = useState(false);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({
    telegramBotToken: '',
    dispatcherChatId: '',
    newOrderNotifications: true,
    statusUpdateNotifications: true,
    driverAssignmentNotifications: true,
    customerNotifications: true,
    systemAlerts: true
  });

  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [generalSettings, setGeneralSettings] = useState<GeneralSettings>({
    companyName: 'STC Transfer',
    supportPhone: '+998 90 123 45 67',
    supportEmail: 'support@stctransfer.uz',
    defaultLanguage: 'ru',
    timezone: 'Asia/Tashkent',
    currency: 'UZS',
    workingHours: {
      start: '06:00',
      end: '22:00'
    },
    maxAdvanceBookingDays: 30
  });

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      setLoading(true);
      console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');

      const response = await fetch('/api/admin/settings');
      const data = await response.json();

      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', data);

      if (data.success) {
        const groupedSettings = data.data;

        // –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if (groupedSettings.tariffs) {
          const tariffs = { ...tariffSettings };
          groupedSettings.tariffs.forEach((setting: any) => {
            if (setting.key === 'basePrice') tariffs.basePrice = setting.parsedValue;
            else if (setting.key === 'minPrice') tariffs.minPrice = setting.parsedValue;
            else if (setting.key === 'perKmRates') tariffs.perKmRates = setting.parsedValue;
            else if (setting.key === 'nightSurcharge') tariffs.nightSurcharge = setting.parsedValue;
            else if (setting.key === 'holidaySurcharge') tariffs.holidaySurcharge = setting.parsedValue;
            else if (setting.key === 'waitingTimeRate') tariffs.waitingTimeRate = setting.parsedValue;
          });
          setTariffSettings(tariffs);
        }

        if (groupedSettings.notifications) {
          const notifications = { ...notificationSettings };
          groupedSettings.notifications.forEach((setting: any) => {
            if (setting.key === 'telegramBotToken') notifications.telegramBotToken = setting.parsedValue;
            else if (setting.key === 'dispatcherChatId') notifications.dispatcherChatId = setting.parsedValue;
            else if (setting.key === 'newOrderNotifications') notifications.newOrderNotifications = setting.parsedValue;
            else if (setting.key === 'statusUpdateNotifications') notifications.statusUpdateNotifications = setting.parsedValue;
            else if (setting.key === 'driverAssignmentNotifications') notifications.driverAssignmentNotifications = setting.parsedValue;
            else if (setting.key === 'customerNotifications') notifications.customerNotifications = setting.parsedValue;
            else if (setting.key === 'systemAlerts') notifications.systemAlerts = setting.parsedValue;
          });
          setNotificationSettings(notifications);
        }

        if (groupedSettings.general) {
          const general = { ...generalSettings };
          groupedSettings.general.forEach((setting: any) => {
            if (setting.key === 'companyName') general.companyName = setting.parsedValue;
            else if (setting.key === 'supportPhone') general.supportPhone = setting.parsedValue;
            else if (setting.key === 'supportEmail') general.supportEmail = setting.parsedValue;
            else if (setting.key === 'defaultLanguage') general.defaultLanguage = setting.parsedValue;
            else if (setting.key === 'timezone') general.timezone = setting.parsedValue;
            else if (setting.key === 'currency') general.currency = setting.parsedValue;
            else if (setting.key === 'workingHours') general.workingHours = setting.parsedValue;
            else if (setting.key === 'maxAdvanceBookingDays') general.maxAdvanceBookingDays = setting.parsedValue;
          });
          setGeneralSettings(general);
        }

        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API');
      } else {
        console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', data.error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    } finally {
      setLoading(false);
    }
  };

  const parseSettings = (settingsArray: SystemSetting[]) => {
    // –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    const notifications = { ...notificationSettings };
    const general = { ...generalSettings };

    settingsArray.forEach(setting => {
      const value = setting.type === 'NUMBER' ? parseFloat(setting.value) :
        setting.type === 'BOOLEAN' ? setting.value === 'true' :
          setting.type === 'JSON' ? JSON.parse(setting.value) :
            setting.value;

      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (setting.category === 'notifications') {
        if (setting.key in notifications) {
          (notifications as any)[setting.key] = value;
        }
      } else if (setting.category === 'general') {
        if (setting.key in general) {
          (general as any)[setting.key] = value;
        }
      }
    });

    setNotificationSettings(notifications);
    setGeneralSettings(general);
  };

  const handleSaveSettings = async () => {
    try {
      setSaving(true);
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const settingsToSave = [
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        { key: 'telegramBotToken', value: notificationSettings.telegramBotToken, type: 'STRING', category: 'notifications' },
        { key: 'dispatcherChatId', value: notificationSettings.dispatcherChatId, type: 'STRING', category: 'notifications' },
        { key: 'newOrderNotifications', value: notificationSettings.newOrderNotifications.toString(), type: 'BOOLEAN', category: 'notifications' },
        { key: 'statusUpdateNotifications', value: notificationSettings.statusUpdateNotifications.toString(), type: 'BOOLEAN', category: 'notifications' },
        { key: 'driverAssignmentNotifications', value: notificationSettings.driverAssignmentNotifications.toString(), type: 'BOOLEAN', category: 'notifications' },
        { key: 'customerNotifications', value: notificationSettings.customerNotifications.toString(), type: 'BOOLEAN', category: 'notifications' },
        { key: 'systemAlerts', value: notificationSettings.systemAlerts.toString(), type: 'BOOLEAN', category: 'notifications' },

        // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        { key: 'companyName', value: generalSettings.companyName, type: 'STRING', category: 'general' },
        { key: 'supportPhone', value: generalSettings.supportPhone, type: 'STRING', category: 'general' },
        { key: 'supportEmail', value: generalSettings.supportEmail, type: 'STRING', category: 'general' },
        { key: 'defaultLanguage', value: generalSettings.defaultLanguage, type: 'STRING', category: 'general' },
        { key: 'timezone', value: generalSettings.timezone, type: 'STRING', category: 'general' },
        { key: 'currency', value: generalSettings.currency, type: 'STRING', category: 'general' },
        { key: 'workingHours', value: JSON.stringify(generalSettings.workingHours), type: 'JSON', category: 'general' },
        { key: 'maxAdvanceBookingDays', value: generalSettings.maxAdvanceBookingDays.toString(), type: 'NUMBER', category: 'general' }
      ];

      console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', settingsToSave);

      const response = await fetch('/api/admin/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ settings: settingsToSave })
      });

      const data = await response.json();
      console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç API —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', data);

      if (data.success) {
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ API');
        setHasChanges(false);
        alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      } else {
        throw new Error(data.error || 'Failed to save settings');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setSaving(false);
    }
  };


  const handleNotificationChange = (key: keyof NotificationSettings, value: any) => {
    setNotificationSettings(prev => ({ ...prev, [key]: value }));
    setHasChanges(true);
  };

  const handleGeneralChange = (key: keyof GeneralSettings, value: any) => {
    setGeneralSettings(prev => ({ ...prev, [key]: value }));
    setHasChanges(true);
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('uz-UZ').format(amount);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h1>
          <p className="text-gray-600 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={loadSettings}
            disabled={loading}
            className="flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50"
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
          <button
            onClick={handleSaveSettings}
            disabled={!hasChanges || saving}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
          >
            <Save className={`w-4 h-4 mr-2 ${saving ? 'animate-pulse' : ''}`} />
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
          </button>
        </div>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö */}
      {hasChanges && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-center">
            <AlertTriangle className="w-5 h-5 text-yellow-600 mr-3" />
            <div>
              <h3 className="text-sm font-medium text-yellow-800">–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</h3>
              <p className="text-sm text-yellow-700 mt-1">
                –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="flex border-b border-gray-200">
          <button
            onClick={() => setActiveTab('notifications')}
            className={`flex items-center px-6 py-4 text-sm font-medium border-b-2 ${activeTab === 'notifications'
              ? 'border-blue-500 text-blue-600'
              : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
          >
            <Bell className="w-4 h-4 mr-2" />
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </button>
          <button
            onClick={() => setActiveTab('general')}
            className={`flex items-center px-6 py-4 text-sm font-medium border-b-2 ${activeTab === 'general'
              ? 'border-blue-500 text-blue-600'
              : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
          >
            <Globe className="w-4 h-4 mr-2" />
            –û–±—â–∏–µ
          </button>
        </div>

        <div className="p-6">
          {/* –í–∫–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          {activeTab === 'notifications' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
                    </label>
                    <input
                      type="password"
                      value={notificationSettings.telegramBotToken}
                      onChange={(e) => handleNotificationChange('telegramBotToken', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather –≤ Telegram
                    </p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Chat ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
                    </label>
                    <input
                      type="text"
                      value={notificationSettings.dispatcherChatId}
                      onChange={(e) => handleNotificationChange('dispatcherChatId', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="123456789"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                <div className="space-y-4">
                  {[
                    { key: 'newOrderNotifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö', description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö' },
                    { key: 'statusUpdateNotifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', description: '–£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞' },
                    { key: 'driverAssignmentNotifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è', description: '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ' },
                    { key: 'customerNotifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º', description: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö' },
                    { key: 'systemAlerts', label: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö' }
                  ].map(({ key, label, description }) => (
                    <div key={key} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div>
                        <h4 className="text-sm font-medium text-gray-900">{label}</h4>
                        <p className="text-sm text-gray-600">{description}</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={notificationSettings[key as keyof NotificationSettings] as boolean}
                          onChange={(e) => handleNotificationChange(key as keyof NotificationSettings, e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
          {activeTab === 'general' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                    </label>
                    <input
                      type="text"
                      value={generalSettings.companyName}
                      onChange={(e) => handleGeneralChange('companyName', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    </label>
                    <input
                      type="tel"
                      value={generalSettings.supportPhone}
                      onChange={(e) => handleGeneralChange('supportPhone', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Email –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    </label>
                    <input
                      type="email"
                      value={generalSettings.supportEmail}
                      onChange={(e) => handleGeneralChange('supportEmail', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –í–∞–ª—é—Ç–∞
                    </label>
                    <select
                      value={generalSettings.currency}
                      onChange={(e) => handleGeneralChange('currency', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="UZS">–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º (UZS)</option>
                      <option value="USD">–î–æ–ª–ª–∞—Ä –°–®–ê (USD)</option>
                      <option value="EUR">–ï–≤—Ä–æ (EUR)</option>
                    </select>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    </label>
                    <select
                      value={generalSettings.defaultLanguage}
                      onChange={(e) => handleGeneralChange('defaultLanguage', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                      <option value="uz">–£–∑–±–µ–∫—Å–∫–∏–π</option>
                      <option value="en">English</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                    </label>
                    <select
                      value={generalSettings.timezone}
                      onChange={(e) => handleGeneralChange('timezone', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="Asia/Tashkent">Asia/Tashkent (UTC+5)</option>
                      <option value="Asia/Samarkand">Asia/Samarkand (UTC+5)</option>
                      <option value="UTC">UTC (UTC+0)</option>
                    </select>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
                    </label>
                    <input
                      type="time"
                      value={generalSettings.workingHours.start}
                      onChange={(e) => handleGeneralChange('workingHours', {
                        ...generalSettings.workingHours,
                        start: e.target.value
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã
                    </label>
                    <input
                      type="time"
                      value={generalSettings.workingHours.end}
                      onChange={(e) => handleGeneralChange('workingHours', {
                        ...generalSettings.workingHours,
                        end: e.target.value
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –¥–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
                    </label>
                    <input
                      type="number"
                      value={generalSettings.maxAdvanceBookingDays}
                      onChange={(e) => handleGeneralChange('maxAdvanceBookingDays', parseInt(e.target.value) || 1)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      min="1"
                      max="365"
                    />
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SystemSettings;
